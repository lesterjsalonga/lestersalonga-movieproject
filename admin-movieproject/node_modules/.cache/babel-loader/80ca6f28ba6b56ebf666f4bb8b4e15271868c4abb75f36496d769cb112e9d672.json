{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Videos\\\\Videos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport { useParams } from 'react-router-dom';\nimport VideosForm from './VideosForm'; // Import VideosForm\nimport './Videos.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Videos() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const {\n    movieId\n  } = useParams();\n  const [videos, setVideos] = useState([]);\n  const [newVideo, setNewVideo] = useState({\n    url: '',\n    description: ''\n  });\n  const [editingVideo, setEditingVideo] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Helper function to extract YouTube video ID from URL\n  const getYouTubeVideoId = url => {\n    if (!url || typeof url !== 'string' || url.trim() === '') {\n      console.error(\"URL is undefined, empty, or not a valid string:\", url);\n      return null;\n    }\n\n    // Regex to match YouTube URLs in various formats\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\n    const match = url.match(regex);\n\n    // If a match is found, return the first captured group (video ID)\n    if (match) {\n      return match[1] || match[2]; // Match can be in either group\n    }\n    return null; // No match found, invalid URL\n  };\n\n  // Fetch videos associated with the current movie\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}/videos`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        if (Array.isArray(response.data.videos)) {\n          setVideos(response.data.videos);\n        } else {\n          console.error(\"Error: No videos found or videos is not an array\");\n          setVideos([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n        setVideos([]);\n      }\n    };\n    fetchVideos();\n  }, [movieId, auth.accessToken]);\n\n  // Handle input changes (for both editing and new videos)\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (editingVideo) {\n      setEditingVideo(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    } else {\n      setNewVideo(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n\n  // Add video function\n  const handleAddVideo = async () => {\n    // Check if URL and description are not empty\n    if (!newVideo.url || !newVideo.description) {\n      alert(\"Please provide both a URL and a description for the video.\");\n      return;\n    }\n\n    // Log the URL before processing\n    console.log(\"URL to be processed:\", newVideo.url);\n\n    // Validate URL\n    const videoId = getYouTubeVideoId(newVideo.url);\n    if (!videoId) {\n      alert(\"Please provide a valid YouTube URL.\");\n      return;\n    }\n    setIsSaving(true);\n    try {\n      const videoData = {\n        movieId,\n        url: newVideo.url,\n        description: newVideo.description,\n        userId: auth.user.userId\n      };\n      const response = await axios.post('/videos', videoData, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n\n      // Add the new video to the list\n      setVideos(prevVideos => [...prevVideos, response.data]);\n\n      // Optionally clear the form if you want\n      setNewVideo({\n        url: '',\n        description: ''\n      });\n      alert(\"Video added successfully!\");\n\n      // Refresh the page after successfully adding the video\n      window.location.reload(); // This will reload the page\n    } catch (error) {\n      console.error(\"Error adding video:\", error);\n      alert(\"Failed to add video.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Handle delete video\n  const handleDeleteVideo = async id => {\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\n      try {\n        await axios.delete(`/videos/${id}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setVideos(prevVideos => prevVideos.filter(video => video.id !== id));\n        alert(\"Video deleted successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting video:\", error);\n        alert(\"Failed to delete video.\");\n      }\n    }\n  };\n\n  // Handle update video\n  const handleUpdateVideo = async () => {\n    // Validate required fields\n    const validateFields = () => {\n      if (!editingVideo.url) {\n        alert(\"Please provide a valid URL.\");\n        return false;\n      }\n      if (!editingVideo.description) {\n        alert(\"Please provide a description.\");\n        return false;\n      }\n      return true;\n    };\n    if (!validateFields()) {\n      return; // Stop if fields are not valid\n    } else {\n      const isConfirm = window.confirm(\"Are you sure you want to update the video?\");\n      if (isConfirm) {\n        const updatedData = {\n          id: editingVideo.id,\n          url: editingVideo.url,\n          description: editingVideo.description,\n          movieId: editingVideo.movieId // Make sure this exists\n        };\n        console.log(\"Updated video data:\", updatedData); // Log the updated data for debugging\n\n        try {\n          // Sending the PATCH request\n          const response = await axios({\n            method: 'patch',\n            url: `/videos/${editingVideo.id}`,\n            data: updatedData,\n            headers: {\n              Accept: 'application/json',\n              Authorization: `Bearer ${auth.accessToken}`\n            }\n          });\n\n          // Handle success\n          alert(\"Video updated successfully!\");\n\n          // Update the local state (assuming you have a function to update videos)\n          setVideos(prevVideos => prevVideos.map(video => video.id === editingVideo.id ? {\n            ...video,\n            ...updatedData\n          } : video));\n\n          // Clear the editing state\n          setEditingVideo(null);\n        } catch (error) {\n          // Error handling\n          if (error.response) {\n            // Server responded with a non-2xx status\n            alert(`Error updating video: ${error.response.data.message || 'Unknown error'}`);\n          } else if (error.request) {\n            // Request was made, but no response was received\n            alert(\"No response received from the server. Please try again later.\");\n          } else {\n            // An unexpected error occurred\n            alert(\"An unexpected error occurred. Please try again.\");\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Video-View-Box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Videos for Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-videos\",\n        children: videos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No videos found for this movie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this) : videos.map(video => {\n          const videoId = getYouTubeVideoId(video.url);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-video\",\n            children: [videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n              width: \"100%\",\n              height: \"315\",\n              src: `https://www.youtube.com/embed/${videoId}`,\n              title: \"Video\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid video URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container-video\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: video.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Added on: \", new Date(video.dateCreated).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => setEditingVideo(video),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteVideo(video.id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 19\n            }, this)]\n          }, video.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideosForm, {\n      videoData: editingVideo ? editingVideo : newVideo,\n      onSubmit: editingVideo ? handleUpdateVideo : handleAddVideo,\n      onChange: handleInputChange,\n      isSaving: isSaving,\n      editingVideo: editingVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n_s(Videos, \"5gqIX21gfEHeRStE2OQ62Gwq68w=\", false, function () {\n  return [useParams];\n});\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","useParams","VideosForm","jsxDEV","_jsxDEV","Videos","_s","auth","movieId","videos","setVideos","newVideo","setNewVideo","url","description","editingVideo","setEditingVideo","isSaving","setIsSaving","getYouTubeVideoId","trim","console","error","regex","match","fetchVideos","response","get","headers","Authorization","accessToken","Array","isArray","data","handleInputChange","e","name","value","target","prev","handleAddVideo","alert","log","videoId","videoData","userId","user","post","prevVideos","window","location","reload","handleDeleteVideo","id","confirm","delete","filter","video","handleUpdateVideo","validateFields","isConfirm","updatedData","method","Accept","map","message","request","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","width","height","src","title","frameBorder","allow","allowFullScreen","Date","dateCreated","toLocaleDateString","onClick","onSubmit","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Videos/Videos.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport { useParams } from 'react-router-dom';\r\nimport VideosForm from './VideosForm'; // Import VideosForm\r\nimport './Videos.css';\r\n\r\nfunction Videos() {\r\n  const { auth } = useContext(AuthContext);\r\n  const { movieId } = useParams();\r\n  const [videos, setVideos] = useState([]);\r\n  const [newVideo, setNewVideo] = useState({ url: '', description: '' });\r\n  const [editingVideo, setEditingVideo] = useState(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  // Helper function to extract YouTube video ID from URL\r\n  const getYouTubeVideoId = (url) => {\r\n    if (!url || typeof url !== 'string' || url.trim() === '') {\r\n      console.error(\"URL is undefined, empty, or not a valid string:\", url);\r\n      return null;\r\n    }\r\n\r\n    // Regex to match YouTube URLs in various formats\r\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\r\n    const match = url.match(regex);\r\n\r\n    // If a match is found, return the first captured group (video ID)\r\n    if (match) {\r\n      return match[1] || match[2]; // Match can be in either group\r\n    }\r\n\r\n    return null; // No match found, invalid URL\r\n  };\r\n\r\n  // Fetch videos associated with the current movie\r\n  useEffect(() => {\r\n    const fetchVideos = async () => {\r\n      try {\r\n        const response = await axios.get(`/movies/${movieId}/videos`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        if (Array.isArray(response.data.videos)) {\r\n          setVideos(response.data.videos);\r\n        } else {\r\n          console.error(\"Error: No videos found or videos is not an array\");\r\n          setVideos([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching videos:\", error);\r\n        setVideos([]);\r\n      }\r\n    };\r\n\r\n    fetchVideos();\r\n  }, [movieId, auth.accessToken]);\r\n\r\n  // Handle input changes (for both editing and new videos)\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (editingVideo) {\r\n      setEditingVideo((prev) => ({ ...prev, [name]: value }));\r\n    } else {\r\n      setNewVideo((prev) => ({ ...prev, [name]: value }));\r\n    }\r\n  };\r\n\r\n  // Add video function\r\n  const handleAddVideo = async () => {\r\n    // Check if URL and description are not empty\r\n    if (!newVideo.url || !newVideo.description) {\r\n      alert(\"Please provide both a URL and a description for the video.\");\r\n      return;\r\n    }\r\n\r\n    // Log the URL before processing\r\n    console.log(\"URL to be processed:\", newVideo.url);\r\n\r\n    // Validate URL\r\n    const videoId = getYouTubeVideoId(newVideo.url);\r\n\r\n    if (!videoId) {\r\n      alert(\"Please provide a valid YouTube URL.\");\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n    try {\r\n      const videoData = {\r\n        movieId,\r\n        url: newVideo.url,\r\n        description: newVideo.description,\r\n        userId: auth.user.userId,\r\n      };\r\n\r\n      const response = await axios.post('/videos', videoData, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n\r\n      // Add the new video to the list\r\n      setVideos((prevVideos) => [...prevVideos, response.data]);\r\n\r\n      // Optionally clear the form if you want\r\n      setNewVideo({ url: '', description: '' });\r\n\r\n      alert(\"Video added successfully!\");\r\n\r\n      // Refresh the page after successfully adding the video\r\n      window.location.reload(); // This will reload the page\r\n\r\n    } catch (error) {\r\n      console.error(\"Error adding video:\", error);\r\n      alert(\"Failed to add video.\");\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  // Handle delete video\r\n  const handleDeleteVideo = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\r\n      try {\r\n        await axios.delete(`/videos/${id}`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        setVideos((prevVideos) => prevVideos.filter((video) => video.id !== id));\r\n        alert(\"Video deleted successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Error deleting video:\", error);\r\n        alert(\"Failed to delete video.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle update video\r\n  const handleUpdateVideo = async () => {\r\n    // Validate required fields\r\n    const validateFields = () => {\r\n      if (!editingVideo.url) {\r\n        alert(\"Please provide a valid URL.\");\r\n        return false;\r\n      }\r\n      if (!editingVideo.description) {\r\n        alert(\"Please provide a description.\");\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n  \r\n    if (!validateFields()) {\r\n      return; // Stop if fields are not valid\r\n    } else {\r\n      const isConfirm = window.confirm(\"Are you sure you want to update the video?\");\r\n      if (isConfirm) {\r\n        const updatedData = {\r\n          id: editingVideo.id,\r\n          url: editingVideo.url,\r\n          description: editingVideo.description,\r\n          movieId: editingVideo.movieId, // Make sure this exists\r\n        };\r\n  \r\n        console.log(\"Updated video data:\", updatedData); // Log the updated data for debugging\r\n  \r\n        try {\r\n          // Sending the PATCH request\r\n          const response = await axios({\r\n            method: 'patch',\r\n            url: `/videos/${editingVideo.id}`,\r\n            data: updatedData,\r\n            headers: {\r\n              Accept: 'application/json',\r\n              Authorization: `Bearer ${auth.accessToken}`,\r\n            },\r\n          });\r\n  \r\n          // Handle success\r\n          alert(\"Video updated successfully!\");\r\n  \r\n          // Update the local state (assuming you have a function to update videos)\r\n          setVideos((prevVideos) =>\r\n            prevVideos.map((video) =>\r\n              video.id === editingVideo.id ? { ...video, ...updatedData } : video\r\n            )\r\n          );\r\n  \r\n          // Clear the editing state\r\n          setEditingVideo(null);\r\n        } catch (error) {\r\n          // Error handling\r\n          if (error.response) {\r\n            // Server responded with a non-2xx status\r\n            alert(`Error updating video: ${error.response.data.message || 'Unknown error'}`);\r\n          } else if (error.request) {\r\n            // Request was made, but no response was received\r\n            alert(\"No response received from the server. Please try again later.\");\r\n          } else {\r\n            // An unexpected error occurred\r\n            alert(\"An unexpected error occurred. Please try again.\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-box\">\r\n      <div className=\"Video-View-Box\">\r\n        <h2>Videos for Movie</h2>\r\n\r\n        <div className=\"card-display-videos\">\r\n          {videos.length === 0 ? (\r\n            <p>No videos found for this movie.</p>\r\n          ) : (\r\n            videos.map((video) => {\r\n              const videoId = getYouTubeVideoId(video.url);\r\n              return (\r\n                <div key={video.id} className=\"card-video\">\r\n                  {videoId ? (\r\n                    <iframe\r\n                      width=\"100%\"\r\n                      height=\"315\"\r\n                      src={`https://www.youtube.com/embed/${videoId}`}\r\n                      title=\"Video\"\r\n                      frameBorder=\"0\"\r\n                      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                      allowFullScreen\r\n                    ></iframe>\r\n                  ) : (\r\n                    <p>Invalid video URL</p>\r\n                  )}\r\n                  <div className=\"container-video\">\r\n                    <h4>{video.description}</h4>\r\n                    <p>Added on: {new Date(video.dateCreated).toLocaleDateString()}</p>\r\n                    <div className=\"buttons-group\">\r\n                      <button className=\"edit-button\" onClick={() => setEditingVideo(video)}>\r\n                        Edit\r\n                      </button>\r\n                      <button className=\"delete-button\" onClick={() => handleDeleteVideo(video.id)}>\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <VideosForm\r\n        videoData={editingVideo ? editingVideo : newVideo}\r\n        onSubmit={editingVideo ? handleUpdateVideo : handleAddVideo}\r\n        onChange={handleInputChange}\r\n        isSaving={isSaving}\r\n        editingVideo={editingVideo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Videos\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}