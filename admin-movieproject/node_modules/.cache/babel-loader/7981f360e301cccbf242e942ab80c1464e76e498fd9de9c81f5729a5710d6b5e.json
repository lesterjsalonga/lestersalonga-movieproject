{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\CastandCrew\\\\CastandCrew.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport axios from 'axios';\nimport './CastandCrew.css';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Casts() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const [query, setQuery] = useState('');\n  const [cast, setCast] = useState([]);\n  const [selectedCast, setSelectedCast] = useState({});\n  const searchRef = useRef();\n  const [notFound, setNotFound] = useState(false);\n  const nameRef = useRef();\n  const characterNameRef = useRef();\n  const urlRef = useRef();\n  const {\n    movieId\n  } = useParams();\n  const [importMessage, setImportMessage] = useState('');\n  const getAll = useCallback(movie_id => {\n    axios({\n      method: 'get',\n      url: `/movies/${movie_id}`,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    }).then(response => {\n      setCast(response.data.casts);\n    }).catch(error => {\n      var _error$response;\n      console.error(\"Error fetching Casts:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    });\n  }, [auth.accessToken]);\n  useEffect(() => {\n    getAll(movieId);\n  }, [movieId, getAll]);\n  const handleSearchPerson = useCallback(async (page = 1) => {\n    setNotFound(true);\n    try {\n      if (!query || query.trim() === '') {\n        searchRef.current.style.border = '2px solid red';\n        console.log(\"Input is empty or undefined\");\n        setTimeout(() => {\n          searchRef.current.style.border = '1px solid #ccc';\n          setNotFound(false);\n        }, 2000);\n        return;\n      }\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/search/person?query=${query}&include_adult=false&language=en-US&page=${page}`,\n        headers: {\n          accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\n        }\n      });\n      if (response.data.results.lenght === 0) {\n        console.log(\"Not Found\");\n        setSelectedCast([]);\n      } else {\n        setNotFound(false);\n        setSelectedCast(response.data.results[0]);\n        console.log(response.data.results);\n      }\n    } catch (error) {\n      console.error(\"Search error:\", error);\n    }\n  }, [query]);\n  const importCasts = async () => {\n    try {\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n        headers: {\n          Accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\n        }\n      });\n      const importedCasts = response.data.cast;\n\n      // Import each cast member\n      const importPromises = importedCasts.map(async data => {\n        // Only import if profile_path exists\n        if (data.profile_path) {\n          const payload = {\n            userId: auth.user.userId,\n            movieId: movieId,\n            name: data.name,\n            characterName: data.character,\n            url: `https://image.tmdb.org/t/p/original/${data.profile_path}`\n          };\n          try {\n            await axios.post('/admin/casts', payload, {\n              headers: {\n                Authorization: `Bearer ${auth.accessToken}`\n              }\n            });\n          } catch (error) {\n            console.error(`Error importing cast member ${data.name}:`, error);\n          }\n        }\n      });\n\n      // Wait for all imports to complete\n      await Promise.all(importPromises);\n\n      // Refresh the cast list and show success message\n      getAll(movieId);\n      setImportMessage(`Successfully imported ${importedCasts.filter(cast => cast.profile_path).length} casts`);\n\n      // Clear message after 3 seconds\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error importing casts:\", error);\n      setImportMessage('Failed to import casts');\n\n      // Clear error message after 3 seconds\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    }\n  };\n  const handleSave = async () => {\n    if (!selectedCast || !selectedCast.name || !selectedCast.characterName) {\n      alert(\"Please select a valid cast member.\");\n      return;\n    }\n    try {\n      const dataCast = {\n        userId: auth.user.userId,\n        movieId: movieId,\n        name: selectedCast.name,\n        url: `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`,\n        characterName: selectedCast.characterName\n      };\n      await axios({\n        method: 'POST',\n        url: '/admin/casts',\n        data: dataCast,\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      alert('Added Successfully');\n      setSelectedCast({});\n      handleClear();\n      getAll(movieId);\n    } catch (error) {\n      alert(\"Error: Unable to save cast. Data might be incomplete.\");\n      console.error(error);\n    }\n  };\n  const handleClear = () => {\n    setQuery(\"\");\n    setSelectedCast({});\n  };\n  const handleDelete = async id => {\n    const isConfirm = window.confirm(\"Are you sure you want to delete this cast?\");\n    if (isConfirm) {\n      try {\n        await axios({\n          method: 'delete',\n          url: `/casts/${id}`,\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        getAll(movieId);\n        alert(\"Deleted Successfully!\");\n      } catch (error) {\n        console.error(\"Delete error:\", error);\n      }\n    }\n  };\n  const validateField = (fieldRef, fieldName) => {\n    if (!fieldRef.current.value.trim()) {\n      fieldRef.current.style.border = '2px solid red';\n      setTimeout(() => {\n        fieldRef.current.style.border = '1px solid #ccc';\n      }, 2000);\n      return false;\n    }\n    return true;\n  };\n  const castupdate = async id => {\n    if (!(selectedCast !== null && selectedCast !== void 0 && selectedCast.id)) {\n      alert(\"No cast selected to update.\");\n      return;\n    }\n    const validateFields = () => {\n      switch (true) {\n        case !validateField(nameRef, \"Name\"):\n          return false;\n        case !validateField(characterNameRef, \"Character Name\"):\n          return false;\n        case !validateField(urlRef, \"URL\"):\n          return false;\n        default:\n          return true;\n      }\n    };\n    if (!validateFields()) {\n      return;\n    } else {\n      const isConfirm = window.confirm(\"Are you sure you want to update the cast?\");\n      if (isConfirm) {\n        const datacast = {\n          id: selectedCast.id,\n          userId: selectedCast.userId,\n          name: selectedCast.name,\n          url: selectedCast.url,\n          characterName: selectedCast.characterName\n        };\n        try {\n          await axios({\n            method: 'patch',\n            url: `/casts/${id}`,\n            data: datacast,\n            headers: {\n              Accept: 'application/json',\n              Authorization: `Bearer ${auth.accessToken}`\n            }\n          });\n          alert('Updated Successfully!');\n          handleClear();\n          getAll(movieId);\n        } catch (error) {\n          if (error.response) {\n            alert(`Error updating cast: ${error.response.data.message || 'Unknown error'}`);\n          } else if (error.request) {\n            alert(\"No response received from server. Please try again later.\");\n          } else {\n            alert(\"An unexpected error occurred. Please try again.\");\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast-box\",\n    children: [importMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-message\",\n      children: importMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Cast-View-Box\",\n      children: cast.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-cast\",\n        children: cast.map(actor => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"buttons-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"delete-button\",\n              onClick: () => handleDelete(actor.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"edit-button\",\n              onClick: () => setSelectedCast(actor),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: actor.url,\n            alt: actor.name,\n            className: \"image-casts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: actor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: actor.characterName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this)]\n        }, actor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-cast\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Cast not found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Search-Box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parent-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box-btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input-search-person\",\n            type: \"text\",\n            value: query,\n            onChange: e => setQuery(e.target.value),\n            placeholder: \"Search cast name\",\n            ref: searchRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-search\",\n            type: \"button\",\n            onClick: () => handleSearchPerson(1),\n            disabled: notFound,\n            children: notFound ? 'Searching...' : 'Search'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            type: \"button\",\n            onClick: handleSave,\n            disabled: !selectedCast,\n            children: \"Add Cast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"import-button\",\n            type: \"button\",\n            onClick: importCasts,\n            children: \"Import from TMDB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cast-detail-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-container-center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"image-cast\",\n                src: selectedCast !== null && selectedCast !== void 0 && selectedCast.profile_path ? `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}` : selectedCast !== null && selectedCast !== void 0 && selectedCast.url ? selectedCast.url : require('../../Form/CastandCrew/not_available.jpg'),\n                className: \"img-cast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"info-text\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Cast Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"cast-name\",\n                value: selectedCast.name || '',\n                onChange: e => setSelectedCast({\n                  ...selectedCast,\n                  name: e.target.value\n                }),\n                ref: nameRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Character Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"character-name\",\n                value: selectedCast.characterName || '',\n                onChange: e => setSelectedCast({\n                  ...selectedCast,\n                  characterName: e.target.value\n                }),\n                ref: characterNameRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"URL:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"url-text-photo\",\n                value: selectedCast.url || '',\n                onChange: e => setSelectedCast({\n                  ...selectedCast,\n                  url: e.target.value\n                }),\n                ref: urlRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), selectedCast.id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"edit-back-btn\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"edit-btn\",\n              type: \"button\",\n              onClick: () => castupdate(selectedCast.id),\n              children: \"Update Cast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n_s(Casts, \"cJpKHrIPqCTJpk8KxX+g9cB/aYg=\", false, function () {\n  return [useParams];\n});\n_c = Casts;\nexport default Casts;\nvar _c;\n$RefreshReg$(_c, \"Casts\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useCallback","useRef","AuthContext","axios","useParams","jsxDEV","_jsxDEV","Casts","_s","auth","query","setQuery","cast","setCast","selectedCast","setSelectedCast","searchRef","notFound","setNotFound","nameRef","characterNameRef","urlRef","movieId","importMessage","setImportMessage","getAll","movie_id","method","url","headers","Accept","Authorization","accessToken","then","response","data","casts","catch","error","_error$response","console","message","handleSearchPerson","page","trim","current","style","border","log","setTimeout","accept","results","lenght","importCasts","importedCasts","importPromises","map","profile_path","payload","userId","user","name","characterName","character","post","Promise","all","filter","length","handleSave","alert","dataCast","handleClear","handleDelete","id","isConfirm","window","confirm","validateField","fieldRef","fieldName","value","castupdate","validateFields","datacast","request","className","children","fileName","_jsxFileName","lineNumber","columnNumber","actor","type","onClick","src","alt","onChange","e","target","placeholder","ref","disabled","require","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/CastandCrew/CastandCrew.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport axios from 'axios';\r\nimport './CastandCrew.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Casts() {\r\n  const { auth } = useContext(AuthContext);\r\n  const [query, setQuery] = useState('');\r\n  const [cast, setCast] = useState([]);\r\n  const [selectedCast, setSelectedCast] = useState({});\r\n  const searchRef = useRef();\r\n  const [notFound, setNotFound] = useState(false);\r\n  const nameRef = useRef();\r\n  const characterNameRef = useRef();\r\n  const urlRef = useRef();\r\n  const { movieId } = useParams();\r\n  const [importMessage, setImportMessage] = useState('');\r\n\r\n  const getAll = useCallback((movie_id) => {\r\n    axios({\r\n      method: 'get',\r\n      url: `/movies/${movie_id}`,\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${auth.accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setCast(response.data.casts);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching Casts:\", error.response?.data || error.message);\r\n      });\r\n  }, [auth.accessToken]);\r\n\r\n  useEffect(() => {\r\n    getAll(movieId);\r\n  }, [movieId, getAll]);\r\n\r\n  const handleSearchPerson = useCallback(async (page = 1) => {\r\n    setNotFound(true);\r\n    try {\r\n      if (!query || query.trim() === '') {\r\n        searchRef.current.style.border = '2px solid red';\r\n        console.log(\"Input is empty or undefined\");\r\n        setTimeout(() => {\r\n          searchRef.current.style.border = '1px solid #ccc';\r\n          setNotFound(false);\r\n        }, 2000);\r\n        return;\r\n      }\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/search/person?query=${query}&include_adult=false&language=en-US&page=${page}`,\r\n        headers: {\r\n          accept: 'application/json',\r\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\r\n        },\r\n      });\r\n\r\n      if (response.data.results.lenght === 0) {\r\n        console.log(\"Not Found\");\r\n        setSelectedCast([])\r\n      } else {\r\n        setNotFound(false);\r\n        setSelectedCast(response.data.results[0]);\r\n        console.log(response.data.results);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Search error:\", error);\r\n    }\r\n  }, [query])\r\n\r\n  const importCasts = async () => {\r\n    try {\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\r\n        headers: {\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\r\n        },\r\n      });\r\n\r\n      const importedCasts = response.data.cast;\r\n      \r\n      // Import each cast member\r\n      const importPromises = importedCasts.map(async (data) => {\r\n        // Only import if profile_path exists\r\n        if (data.profile_path) {\r\n          const payload = {\r\n            userId: auth.user.userId,\r\n            movieId: movieId,\r\n            name: data.name,\r\n            characterName: data.character,\r\n            url: `https://image.tmdb.org/t/p/original/${data.profile_path}`,\r\n          };\r\n\r\n          try {\r\n            await axios.post('/admin/casts', payload, {\r\n              headers: {\r\n                Authorization: `Bearer ${auth.accessToken}`,\r\n              },\r\n            });\r\n          } catch (error) {\r\n            console.error(`Error importing cast member ${data.name}:`, error);\r\n          }\r\n        }\r\n      });\r\n\r\n      // Wait for all imports to complete\r\n      await Promise.all(importPromises);\r\n\r\n      // Refresh the cast list and show success message\r\n      getAll(movieId);\r\n      setImportMessage(`Successfully imported ${importedCasts.filter(cast => cast.profile_path).length} casts`);\r\n      \r\n      // Clear message after 3 seconds\r\n      setTimeout(() => {\r\n        setImportMessage('');\r\n      }, 3000);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error importing casts:\", error);\r\n      setImportMessage('Failed to import casts');\r\n      \r\n      // Clear error message after 3 seconds\r\n      setTimeout(() => {\r\n        setImportMessage('');\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!selectedCast || !selectedCast.name || !selectedCast.characterName) {\r\n      alert(\"Please select a valid cast member.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const dataCast = {\r\n        userId: auth.user.userId,\r\n        movieId: movieId,\r\n        name: selectedCast.name,\r\n        url: `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`,\r\n        characterName: selectedCast.characterName,\r\n      };\r\n      await axios({\r\n        method: 'POST',\r\n        url: '/admin/casts',\r\n        data: dataCast,\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,\r\n        },\r\n      });\r\n      alert('Added Successfully');\r\n      setSelectedCast({});\r\n      handleClear();\r\n      getAll(movieId);\r\n    } catch (error) {\r\n      alert(\"Error: Unable to save cast. Data might be incomplete.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setQuery(\"\");\r\n    setSelectedCast({});\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const isConfirm = window.confirm(\"Are you sure you want to delete this cast?\");\r\n    if (isConfirm) {\r\n      try {\r\n        await axios({\r\n          method: 'delete',\r\n          url: `/casts/${id}`,\r\n          headers: {\r\n            Authorization: `Bearer ${auth.accessToken}`,\r\n          },\r\n        });\r\n        getAll(movieId);\r\n        alert(\"Deleted Successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Delete error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateField = (fieldRef, fieldName) => {\r\n    if (!fieldRef.current.value.trim()) {\r\n      fieldRef.current.style.border = '2px solid red';\r\n      setTimeout(() => {\r\n        fieldRef.current.style.border = '1px solid #ccc';\r\n      }, 2000);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const castupdate = async (id) => {\r\n    if (!selectedCast?.id) {\r\n      alert(\"No cast selected to update.\");\r\n      return;\r\n    }\r\n\r\n    const validateFields = () => {\r\n      switch (true) {\r\n        case !validateField(nameRef, \"Name\"):\r\n          return false;\r\n        case !validateField(characterNameRef, \"Character Name\"):\r\n          return false;\r\n        case !validateField(urlRef, \"URL\"):\r\n          return false;\r\n        default:\r\n          return true;\r\n      }\r\n    };\r\n\r\n    if (!validateFields()) {\r\n      return;\r\n    } else {\r\n      const isConfirm = window.confirm(\"Are you sure you want to update the cast?\");\r\n      if (isConfirm) {\r\n        const datacast = {\r\n          id: selectedCast.id,\r\n          userId: selectedCast.userId,\r\n          name: selectedCast.name,\r\n          url: selectedCast.url,\r\n          characterName: selectedCast.characterName,\r\n        };\r\n\r\n        try {\r\n          await axios({\r\n            method: 'patch',\r\n            url: `/casts/${id}`,\r\n            data: datacast,\r\n            headers: {\r\n              Accept: 'application/json',\r\n              Authorization: `Bearer ${auth.accessToken}`,\r\n            },\r\n          });\r\n          alert('Updated Successfully!');\r\n          handleClear();\r\n          getAll(movieId);\r\n        } catch (error) {\r\n          if (error.response) {\r\n            alert(`Error updating cast: ${error.response.data.message || 'Unknown error'}`);\r\n          } else if (error.request) {\r\n            alert(\"No response received from server. Please try again later.\");\r\n          } else {\r\n            alert(\"An unexpected error occurred. Please try again.\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cast-box\">\r\n      {importMessage && (\r\n        <div className=\"import-message\">\r\n          {importMessage}\r\n        </div>\r\n      )}\r\n      \r\n      <div className=\"Cast-View-Box\">\r\n        {cast.length > 0 ? (\r\n          <div className=\"card-display-cast\">\r\n            {cast.map((actor) => (\r\n              <div key={actor.id} className=\"card\">\r\n                <div className=\"buttons-group\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"delete-button\"\r\n                    onClick={() => handleDelete(actor.id)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"edit-button\"\r\n                    onClick={() => setSelectedCast(actor)}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                </div>\r\n                <img src={actor.url} alt={actor.name} className=\"image-casts\" />\r\n                <div className=\"container\">\r\n                  <h4>{actor.name}</h4>\r\n                  <p>{actor.characterName}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-cast\">\r\n            <h3>Cast not found</h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Search-Box\">\r\n        <div className=\"parent-container\">\r\n          <div className=\"search-box-btn\">\r\n            <input\r\n              className=\"input-search-person\"\r\n              type=\"text\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              placeholder=\"Search cast name\"\r\n              ref={searchRef}\r\n            />\r\n            <button\r\n              className=\"button-search\"\r\n              type=\"button\"\r\n              onClick={() => handleSearchPerson(1)}\r\n              disabled={notFound}\r\n            >\r\n              {notFound ? 'Searching...' : 'Search'}\r\n            </button>\r\n            <button\r\n              className=\"save-button\"\r\n              type=\"button\"\r\n              onClick={handleSave}\r\n              disabled={!selectedCast}\r\n            >\r\n              Add Cast\r\n            </button>\r\n            <button\r\n              className=\"import-button\"\r\n              type=\"button\"\r\n              onClick={importCasts}\r\n            >\r\n              Import from TMDB\r\n            </button>\r\n          </div>\r\n\r\n          <div className='cast-detail-box'>\r\n            <div className='image-container-center'>\r\n              <div className='image-container'>\r\n              <img\r\n                alt=\"image-cast\"\r\n                src={selectedCast?.profile_path\r\n                  ? `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`\r\n                  : selectedCast?.url\r\n                    ? selectedCast.url\r\n                    : require('../../Form/CastandCrew/not_available.jpg')\r\n                }\r\n                className='img-cast'\r\n              />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"info-text\">\r\n              <div className=\"input-group\">\r\n                <label>Cast Name:</label>\r\n                <input\r\n                  className=\"cast-name\"\r\n                  value={selectedCast.name || ''}\r\n                  onChange={(e) => setSelectedCast({ ...selectedCast, name: e.target.value })}\r\n                  ref={nameRef} />\r\n              </div>\r\n              <div className=\"input-group\">\r\n                <label>Character Name:</label>\r\n                <input\r\n                  className=\"character-name\"\r\n                  value={selectedCast.characterName || ''}\r\n                  onChange={(e) => setSelectedCast({ ...selectedCast, characterName: e.target.value })}\r\n                  ref={characterNameRef}\r\n                />\r\n              </div>\r\n              <div className=\"input-group\">\r\n                <label>URL:</label>\r\n                <input\r\n                  className=\"url-text-photo\"\r\n                  value={selectedCast.url || ''}\r\n                  onChange={(e) => setSelectedCast({ ...selectedCast, url: e.target.value })}\r\n                  ref={urlRef}\r\n                />\r\n              </div>\r\n            </div>\r\n            {selectedCast.id && (\r\n              <div className=\"edit-back-btn\">\r\n                <button className=\"edit-btn\" type=\"button\" onClick={() => castupdate(selectedCast.id)}>\r\n                  Update Cast\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Casts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}