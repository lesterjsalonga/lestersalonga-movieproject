{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../utils/context/AuthToken'; // Import AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = () => {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext); // Use AuthContext to access the accessToken\n  const [query, setQuery] = useState('');\n  const [searchedMovieList, setSearchedMovieList] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [notFound, setNotFound] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n  const API_BASE_URL = 'https://api.themoviedb.org/3';\n\n  // Handle movie search\n  const handleSearch = useCallback(async (page = 1) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`${API_BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`);\n      if (response.data.results.length === 0) {\n        setNotFound(true);\n        setSearchedMovieList([]);\n      } else {\n        setSearchedMovieList(response.data.results);\n        setNotFound(false);\n      }\n    } catch (err) {\n      setError('Error fetching movies. Please try again later.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [query]);\n\n  // Handle saving the selected movie\n  const handleSave = async () => {\n    if (!selectedMovie) {\n      alert(\"Please select a movie.\");\n      return;\n    }\n    const movieData = {\n      tmdbId: selectedMovie.id,\n      title: selectedMovie.title,\n      overview: selectedMovie.overview,\n      popularity: parseFloat(selectedMovie.popularity),\n      releaseDate: selectedMovie.release_date,\n      voteAverage: parseFloat(selectedMovie.vote_average),\n      backdropPath: selectedMovie.backdrop_path ? `https://image.tmdb.org/t/p/original/${selectedMovie.backdrop_path}` : '',\n      posterPath: `https://image.tmdb.org/t/p/original/${selectedMovie.poster_path}`\n    };\n    try {\n      const response = await axios({\n        method: 'POST',\n        url: '/movies',\n        // Replace with your backend endpoint\n        data: movieData,\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}` // Add access token to the request headers\n        }\n      });\n      alert('Movie saved!');\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error saving movie:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert(\"Error saving movie.\");\n    }\n  };\n\n  // Handle selecting a movie from the search results\n  const handleSelectMovie = movie => {\n    setSelectedMovie(movie);\n    setNotFound(false); // Reset the \"not found\" state when a movie is selected\n  };\n\n  // Render component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search for a Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: e => setQuery(e.target.value) // Update search query\n      ,\n      placeholder: \"Enter movie name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleSearch(),\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }, this), \"  \", error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this), \"  \", notFound && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No movies found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 34\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: searchedMovieList.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSelectMovie(movie),\n        style: {\n          cursor: 'pointer'\n        },\n        children: [movie.title, \" (\", movie.release_date ? movie.release_date.split('-')[0] : 'N/A', \")\"]\n      }, movie.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), selectedMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Selected Movie: \", selectedMovie.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedMovie.overview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Release Date: \", selectedMovie.release_date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `https://image.tmdb.org/t/p/original/${selectedMovie.poster_path}`,\n        alt: selectedMovie.title,\n        style: {\n          width: '200px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"ByvIbvF4jQP39LZOziA2vf+rmbQ=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useCallback","useContext","useEffect","axios","AuthContext","jsxDEV","_jsxDEV","Form","_s","auth","query","setQuery","searchedMovieList","setSearchedMovieList","selectedMovie","setSelectedMovie","notFound","setNotFound","isLoading","setIsLoading","error","setError","API_KEY","process","env","REACT_APP_TMDB_API_KEY","API_BASE_URL","handleSearch","page","response","get","data","results","length","err","console","handleSave","alert","movieData","tmdbId","id","title","overview","popularity","parseFloat","releaseDate","release_date","voteAverage","vote_average","backdropPath","backdrop_path","posterPath","poster_path","method","url","headers","Authorization","accessToken","_error$response","message","handleSelectMovie","movie","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","style","color","map","cursor","split","src","alt","width","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Form.jsx"],"sourcesContent":["import React, { useState, useCallback, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../../../../utils/context/AuthToken';  // Import AuthContext\r\n\r\nconst Form = () => {\r\n  const { auth } = useContext(AuthContext);  // Use AuthContext to access the accessToken\r\n  const [query, setQuery] = useState('');\r\n  const [searchedMovieList, setSearchedMovieList] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n  const [notFound, setNotFound] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\r\n  const API_BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\n  // Handle movie search\r\n  const handleSearch = useCallback(async (page = 1) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(\r\n        `${API_BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`\r\n      );\r\n\r\n      if (response.data.results.length === 0) {\r\n        setNotFound(true);\r\n        setSearchedMovieList([]);\r\n      } else {\r\n        setSearchedMovieList(response.data.results);\r\n        setNotFound(false);\r\n      }\r\n    } catch (err) {\r\n      setError('Error fetching movies. Please try again later.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [query]);\r\n\r\n  // Handle saving the selected movie\r\n  const handleSave = async () => {\r\n    if (!selectedMovie) {\r\n      alert(\"Please select a movie.\");\r\n      return;\r\n    }\r\n\r\n    const movieData = {\r\n      tmdbId: selectedMovie.id,\r\n      title: selectedMovie.title,\r\n      overview: selectedMovie.overview,\r\n      popularity: parseFloat(selectedMovie.popularity),\r\n      releaseDate: selectedMovie.release_date,\r\n      voteAverage: parseFloat(selectedMovie.vote_average),\r\n      backdropPath: selectedMovie.backdrop_path ? `https://image.tmdb.org/t/p/original/${selectedMovie.backdrop_path}` : '',\r\n      posterPath: `https://image.tmdb.org/t/p/original/${selectedMovie.poster_path}`,\r\n    };\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: 'POST',\r\n        url: '/movies',  // Replace with your backend endpoint\r\n        data: movieData,\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,  // Add access token to the request headers\r\n        },\r\n      });\r\n\r\n      alert('Movie saved!');\r\n    } catch (error) {\r\n      console.error(\"Error saving movie:\", error.response?.data || error.message);\r\n      alert(\"Error saving movie.\");\r\n    }\r\n  };\r\n\r\n  // Handle selecting a movie from the search results\r\n  const handleSelectMovie = (movie) => {\r\n    setSelectedMovie(movie);\r\n    setNotFound(false); // Reset the \"not found\" state when a movie is selected\r\n  };\r\n\r\n  // Render component\r\n  return (\r\n    <div>\r\n      <h1>Search for a Movie</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}  // Update search query\r\n        placeholder=\"Enter movie name\"\r\n      />\r\n      <button onClick={() => handleSearch()}>Search</button>\r\n      \r\n      {isLoading && <p>Loading...</p>}  {/* Show loading spinner */}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}  {/* Show error message */}\r\n      {notFound && !isLoading && <p>No movies found.</p>}  {/* Handle not found movies */}\r\n\r\n      <ul>\r\n        {searchedMovieList.map((movie) => (\r\n          <li key={movie.id} onClick={() => handleSelectMovie(movie)} style={{ cursor: 'pointer' }}>\r\n            {movie.title} ({movie.release_date ? movie.release_date.split('-')[0] : 'N/A'})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {selectedMovie && (\r\n        <div>\r\n          <h2>Selected Movie: {selectedMovie.title}</h2>\r\n          <p>{selectedMovie.overview}</p>\r\n          <p>Release Date: {selectedMovie.release_date}</p>\r\n          <img\r\n            src={`https://image.tmdb.org/t/p/original/${selectedMovie.poster_path}`}\r\n            alt={selectedMovie.title}\r\n            style={{ width: '200px' }}\r\n          />\r\n          <button onClick={handleSave}>Save Movie</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}