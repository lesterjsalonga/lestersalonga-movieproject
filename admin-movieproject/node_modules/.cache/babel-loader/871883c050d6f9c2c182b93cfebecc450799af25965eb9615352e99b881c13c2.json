{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Videos\\\\Videos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport { useParams } from 'react-router-dom';\nimport VideosForm from './VideosForm';\nimport './Videos.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Videos() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const {\n    movieId\n  } = useParams();\n  const [videos, setVideos] = useState([]);\n  const [newVideo, setNewVideo] = useState({\n    url: '',\n    description: ''\n  });\n  const [editingVideo, setEditingVideo] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n  const [importMessage, setImportMessage] = useState('');\n  const [tmdbMovieId, setTmdbMovieId] = useState(null);\n  const getYouTubeVideoId = url => {\n    if (!url || typeof url !== 'string' || url.trim() === '') {\n      console.error(\"URL is undefined, empty, or not a valid string:\", url);\n      return null;\n    }\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\n    const match = url.match(regex);\n    if (match) {\n      return match[1] || match[2];\n    }\n    return null;\n  };\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setTmdbMovieId(response.data.tmdbId);\n      } catch (error) {\n        console.error(\"Error fetching movie details:\", error);\n      }\n    };\n    const fetchVideos = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}/videos`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        if (Array.isArray(response.data.videos)) {\n          setVideos(response.data.videos);\n        } else {\n          console.error(\"Error: No videos found or videos is not an array\");\n          setVideos([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n        setVideos([]);\n      }\n    };\n    fetchMovieDetails();\n    fetchVideos();\n  }, [movieId, auth.accessToken]);\n  const importVideosFromTMDB = async () => {\n    if (!tmdbMovieId) {\n      setImportMessage('TMDB Movie ID not found');\n      setTimeout(() => setImportMessage(''), 3000);\n      return;\n    }\n    try {\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/movie/${tmdbMovieId}/videos?language=en-US`,\n        headers: {\n          Accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\n        }\n      });\n      const importedVideos = response.data.results;\n      const importPromises = importedVideos.map(async video => {\n        if (video.site === 'YouTube') {\n          const payload = {\n            userId: auth.user.userId,\n            movieId: movieId,\n            url: `https://www.youtube.com/watch?v=${video.key}`,\n            description: video.name\n          };\n          try {\n            await axios.post('/videos', payload, {\n              headers: {\n                Authorization: `Bearer ${auth.accessToken}`\n              }\n            });\n          } catch (error) {\n            console.error(`Error importing video ${video.name}:`, error);\n          }\n        }\n      });\n      await Promise.all(importPromises);\n\n      // Refresh videos list\n      const updatedVideosResponse = await axios.get(`/movies/${movieId}/videos`, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      setVideos(updatedVideosResponse.data.videos);\n      setImportMessage(`Successfully imported ${importedVideos.filter(v => v.site === 'YouTube').length} videos`);\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error importing videos:\", error);\n      setImportMessage('Failed to import videos');\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (editingVideo) {\n      setEditingVideo(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    } else {\n      setNewVideo(prev => ({\n        ...prev,\n        [name]: value\n      }));\n    }\n  };\n  const handleAddVideo = async () => {\n    if (!newVideo.url || !newVideo.description) {\n      alert(\"Please provide both a URL and a description for the video.\");\n      return;\n    }\n    const videoId = getYouTubeVideoId(newVideo.url);\n    if (!videoId) {\n      alert(\"Please provide a valid YouTube URL.\");\n      return;\n    }\n    setIsSaving(true);\n    try {\n      const videoData = {\n        movieId,\n        url: newVideo.url,\n        description: newVideo.description,\n        userId: auth.user.userId\n      };\n      const response = await axios.post('/videos', videoData, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      setVideos(prevVideos => [...prevVideos, response.data]);\n      setNewVideo({\n        url: '',\n        description: ''\n      });\n      alert(\"Video added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding video:\", error);\n      alert(\"Failed to add video.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleDeleteVideo = async id => {\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\n      try {\n        await axios.delete(`/videos/${id}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setVideos(prevVideos => prevVideos.filter(video => video.id !== id));\n        alert(\"Video deleted successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting video:\", error);\n        alert(\"Failed to delete video.\");\n      }\n    }\n  };\n  const handleUpdateVideo = async () => {\n    const validateFields = () => {\n      if (!editingVideo.url) {\n        alert(\"Please provide a valid URL.\");\n        return false;\n      }\n      if (!editingVideo.description) {\n        alert(\"Please provide a description.\");\n        return false;\n      }\n      return true;\n    };\n    if (!validateFields()) {\n      return;\n    } else {\n      const isConfirm = window.confirm(\"Are you sure you want to update the video?\");\n      if (isConfirm) {\n        const updatedData = {\n          id: editingVideo.id,\n          url: editingVideo.url,\n          description: editingVideo.description,\n          movieId: editingVideo.movieId\n        };\n        try {\n          const response = await axios({\n            method: 'patch',\n            url: `/videos/${editingVideo.id}`,\n            data: updatedData,\n            headers: {\n              Accept: 'application/json',\n              Authorization: `Bearer ${auth.accessToken}`\n            }\n          });\n          alert(\"Video updated successfully!\");\n          setVideos(prevVideos => prevVideos.map(video => video.id === editingVideo.id ? {\n            ...video,\n            ...updatedData\n          } : video));\n          setEditingVideo(null);\n        } catch (error) {\n          if (error.response) {\n            alert(`Error updating video: ${error.response.data.message || 'Unknown error'}`);\n          } else if (error.request) {\n            alert(\"No response received from the server. Please try again later.\");\n          } else {\n            alert(\"An unexpected error occurred. Please try again.\");\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-box\",\n    children: [importMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-message\",\n      children: importMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Video-View-Box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Videos for Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-videos\",\n        children: videos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No videos found for this movie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this) : videos.map(video => {\n          const videoId = getYouTubeVideoId(video.url);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-video\",\n            children: [videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n              width: \"100%\",\n              height: \"315\",\n              src: `https://www.youtube.com/embed/${videoId}`,\n              title: \"Video\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid video URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container-video\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: video.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Added on: \", new Date(video.dateCreated).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => setEditingVideo(video),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteVideo(video.id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 19\n            }, this)]\n          }, video.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Search-Box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"import-button\",\n          type: \"button\",\n          onClick: importVideosFromTMDB,\n          children: \"Import from TMDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideosForm, {\n      videoData: editingVideo ? editingVideo : newVideo,\n      onSubmit: editingVideo ? handleUpdateVideo : handleAddVideo,\n      onChange: handleInputChange,\n      isSaving: isSaving,\n      editingVideo: editingVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n}\n_s(Videos, \"ncVivpg+uvIgzBG+Uu93r70YKsI=\", false, function () {\n  return [useParams];\n});\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","useParams","VideosForm","jsxDEV","_jsxDEV","Videos","_s","auth","movieId","videos","setVideos","newVideo","setNewVideo","url","description","editingVideo","setEditingVideo","isSaving","setIsSaving","importMessage","setImportMessage","tmdbMovieId","setTmdbMovieId","getYouTubeVideoId","trim","console","error","regex","match","fetchMovieDetails","response","get","headers","Authorization","accessToken","data","tmdbId","fetchVideos","Array","isArray","importVideosFromTMDB","setTimeout","method","Accept","importedVideos","results","importPromises","map","video","site","payload","userId","user","key","name","post","Promise","all","updatedVideosResponse","filter","v","length","handleInputChange","e","value","target","prev","handleAddVideo","alert","videoId","videoData","prevVideos","handleDeleteVideo","id","window","confirm","delete","handleUpdateVideo","validateFields","isConfirm","updatedData","message","request","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","src","title","frameBorder","allow","allowFullScreen","Date","dateCreated","toLocaleDateString","onClick","type","onSubmit","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Videos/Videos.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport { useParams } from 'react-router-dom';\r\nimport VideosForm from './VideosForm';\r\nimport './Videos.css';\r\n\r\nfunction Videos() {\r\n  const { auth } = useContext(AuthContext);\r\n  const { movieId } = useParams();\r\n  const [videos, setVideos] = useState([]);\r\n  const [newVideo, setNewVideo] = useState({ url: '', description: '' });\r\n  const [editingVideo, setEditingVideo] = useState(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [importMessage, setImportMessage] = useState('');\r\n  const [tmdbMovieId, setTmdbMovieId] = useState(null);\r\n\r\n  const getYouTubeVideoId = (url) => {\r\n    if (!url || typeof url !== 'string' || url.trim() === '') {\r\n      console.error(\"URL is undefined, empty, or not a valid string:\", url);\r\n      return null;\r\n    }\r\n\r\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\r\n    const match = url.match(regex);\r\n\r\n    if (match) {\r\n      return match[1] || match[2];\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchMovieDetails = async () => {\r\n      try {\r\n        const response = await axios.get(`/movies/${movieId}`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n        setTmdbMovieId(response.data.tmdbId);\r\n      } catch (error) {\r\n        console.error(\"Error fetching movie details:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchVideos = async () => {\r\n      try {\r\n        const response = await axios.get(`/movies/${movieId}/videos`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        if (Array.isArray(response.data.videos)) {\r\n          setVideos(response.data.videos);\r\n        } else {\r\n          console.error(\"Error: No videos found or videos is not an array\");\r\n          setVideos([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching videos:\", error);\r\n        setVideos([]);\r\n      }\r\n    };\r\n\r\n    fetchMovieDetails();\r\n    fetchVideos();\r\n  }, [movieId, auth.accessToken]);\r\n\r\n  const importVideosFromTMDB = async () => {\r\n    if (!tmdbMovieId) {\r\n      setImportMessage('TMDB Movie ID not found');\r\n      setTimeout(() => setImportMessage(''), 3000);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/movie/${tmdbMovieId}/videos?language=en-US`,\r\n        headers: {\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\r\n        },\r\n      });\r\n\r\n      const importedVideos = response.data.results;\r\n      \r\n      const importPromises = importedVideos.map(async (video) => {\r\n        if (video.site === 'YouTube') {\r\n          const payload = {\r\n            userId: auth.user.userId,\r\n            movieId: movieId,\r\n            url: `https://www.youtube.com/watch?v=${video.key}`,\r\n            description: video.name,\r\n          };\r\n\r\n          try {\r\n            await axios.post('/videos', payload, {\r\n              headers: {\r\n                Authorization: `Bearer ${auth.accessToken}`,\r\n              },\r\n            });\r\n          } catch (error) {\r\n            console.error(`Error importing video ${video.name}:`, error);\r\n          }\r\n        }\r\n      });\r\n\r\n      await Promise.all(importPromises);\r\n\r\n      // Refresh videos list\r\n      const updatedVideosResponse = await axios.get(`/movies/${movieId}/videos`, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n\r\n      setVideos(updatedVideosResponse.data.videos);\r\n\r\n      setImportMessage(`Successfully imported ${importedVideos.filter(v => v.site === 'YouTube').length} videos`);\r\n      \r\n      setTimeout(() => {\r\n        setImportMessage('');\r\n      }, 3000);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error importing videos:\", error);\r\n      setImportMessage('Failed to import videos');\r\n      \r\n      setTimeout(() => {\r\n        setImportMessage('');\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (editingVideo) {\r\n      setEditingVideo((prev) => ({ ...prev, [name]: value }));\r\n    } else {\r\n      setNewVideo((prev) => ({ ...prev, [name]: value }));\r\n    }\r\n  };\r\n\r\n  const handleAddVideo = async () => {\r\n    if (!newVideo.url || !newVideo.description) {\r\n      alert(\"Please provide both a URL and a description for the video.\");\r\n      return;\r\n    }\r\n\r\n    const videoId = getYouTubeVideoId(newVideo.url);\r\n\r\n    if (!videoId) {\r\n      alert(\"Please provide a valid YouTube URL.\");\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n    try {\r\n      const videoData = {\r\n        movieId,\r\n        url: newVideo.url,\r\n        description: newVideo.description,\r\n        userId: auth.user.userId,\r\n      };\r\n\r\n      const response = await axios.post('/videos', videoData, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n\r\n      setVideos((prevVideos) => [...prevVideos, response.data]);\r\n\r\n      setNewVideo({ url: '', description: '' });\r\n\r\n      alert(\"Video added successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding video:\", error);\r\n      alert(\"Failed to add video.\");\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteVideo = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\r\n      try {\r\n        await axios.delete(`/videos/${id}`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        setVideos((prevVideos) => prevVideos.filter((video) => video.id !== id));\r\n        alert(\"Video deleted successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Error deleting video:\", error);\r\n        alert(\"Failed to delete video.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpdateVideo = async () => {\r\n    const validateFields = () => {\r\n      if (!editingVideo.url) {\r\n        alert(\"Please provide a valid URL.\");\r\n        return false;\r\n      }\r\n      if (!editingVideo.description) {\r\n        alert(\"Please provide a description.\");\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n  \r\n    if (!validateFields()) {\r\n      return;\r\n    } else {\r\n      const isConfirm = window.confirm(\"Are you sure you want to update the video?\");\r\n      if (isConfirm) {\r\n        const updatedData = {\r\n          id: editingVideo.id,\r\n          url: editingVideo.url,\r\n          description: editingVideo.description,\r\n          movieId: editingVideo.movieId,\r\n        };\r\n  \r\n        try {\r\n          const response = await axios({\r\n            method: 'patch',\r\n            url: `/videos/${editingVideo.id}`,\r\n            data: updatedData,\r\n            headers: {\r\n              Accept: 'application/json',\r\n              Authorization: `Bearer ${auth.accessToken}`,\r\n            },\r\n          });\r\n  \r\n          alert(\"Video updated successfully!\");\r\n  \r\n          setVideos((prevVideos) =>\r\n            prevVideos.map((video) =>\r\n              video.id === editingVideo.id ? { ...video, ...updatedData } : video\r\n            )\r\n          );\r\n  \r\n          setEditingVideo(null);\r\n        } catch (error) {\r\n          if (error.response) {\r\n            alert(`Error updating video: ${error.response.data.message || 'Unknown error'}`);\r\n          } else if (error.request) {\r\n            alert(\"No response received from the server. Please try again later.\");\r\n          } else {\r\n            alert(\"An unexpected error occurred. Please try again.\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-box\">\r\n      {importMessage && (\r\n        <div className=\"import-message\">\r\n          {importMessage}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"Video-View-Box\">\r\n        <h2>Videos for Movie</h2>\r\n\r\n        <div className=\"card-display-videos\">\r\n          {videos.length === 0 ? (\r\n            <p>No videos found for this movie.</p>\r\n          ) : (\r\n            videos.map((video) => {\r\n              const videoId = getYouTubeVideoId(video.url);\r\n              return (\r\n                <div key={video.id} className=\"card-video\">\r\n                  {videoId ? (\r\n                    <iframe\r\n                      width=\"100%\"\r\n                      height=\"315\"\r\n                      src={`https://www.youtube.com/embed/${videoId}`}\r\n                      title=\"Video\"\r\n                      frameBorder=\"0\"\r\n                      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                      allowFullScreen\r\n                    ></iframe>\r\n                  ) : (\r\n                    <p>Invalid video URL</p>\r\n                  )}\r\n                  <div className=\"container-video\">\r\n                    <h4>{video.description}</h4>\r\n                    <p>Added on: {new Date(video.dateCreated).toLocaleDateString()}</p>\r\n                    <div className=\"buttons-group\">\r\n                      <button className=\"edit-button\" onClick={() => setEditingVideo(video)}>\r\n                        Edit\r\n                      </button>\r\n                      <button className=\"delete-button\" onClick={() => handleDeleteVideo(video.id)}>\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Search-Box\">\r\n        <div className=\"search-box-btn\">\r\n          <button\r\n            className=\"import-button\"\r\n            type=\"button\"\r\n            onClick={importVideosFromTMDB}\r\n          >\r\n            Import from TMDB\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <VideosForm\r\n        videoData={editingVideo ? editingVideo : newVideo}\r\n        onSubmit={editingVideo ? handleUpdateVideo : handleAddVideo}\r\n        onChange={handleInputChange}\r\n        isSaving={isSaving}\r\n        editingVideo={editingVideo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Videos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}