{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\utils\\\\context\\\\AuthToken.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize auth state from localStorage\n  const initialAuthState = {\n    accessToken: localStorage.getItem('accessToken') || null,\n    user: JSON.parse(localStorage.getItem('user')) || null\n  };\n  const [auth, setAuth] = useState(initialAuthState);\n  const [movie, setMovie] = useState(null);\n  const [lists, setLists] = useState([]);\n\n  // Function to update authentication data\n  const setAuthData = data => {\n    const updatedAuth = {\n      accessToken: data.accessToken,\n      user: data.user\n    };\n\n    // Update state and localStorage\n    setAuth(updatedAuth);\n    localStorage.setItem('accessToken', data.accessToken);\n    localStorage.setItem('user', JSON.stringify(data.user));\n    localStorage.setItem('tab', JSON.stringify('cast'));\n  };\n\n  // Function to update movie information\n  const setMovieInfo = movieInfo => {\n    if (movieInfo && movieInfo.id !== (movie === null || movie === void 0 ? void 0 : movie.id)) {\n      console.log(movieInfo);\n      setMovie(movieInfo);\n    }\n  };\n\n  // Function to update list data\n  const setListDataMovie = listData => {\n    setLists(listData);\n  };\n\n  // Function to clear authentication data\n  const clearAuthData = () => {\n    // Reset auth state and clear movie and lists\n    setAuth({\n      accessToken: null,\n      user: null\n    });\n    setMovie(null);\n    setLists([]);\n\n    // Remove from localStorage\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('user');\n    localStorage.removeItem('tab');\n  };\n\n  // Effect to fetch movie data when access token is present and movie is null\n  useEffect(() => {\n    if (!movie && auth.accessToken) {\n      console.log('Trigger fetching movie data because movie is null');\n      // Fetch movie data logic can be added here\n    }\n  }, [auth.accessToken, movie]); // Dependency array includes only necessary variables\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      setAuthData,\n      clearAuthData,\n      movie,\n      setMovieInfo,\n      lists,\n      setListDataMovie\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"FnVZGOQr1f7q4tQg4yONimTBrQ0=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","initialAuthState","accessToken","localStorage","getItem","user","JSON","parse","auth","setAuth","movie","setMovie","lists","setLists","setAuthData","data","updatedAuth","setItem","stringify","setMovieInfo","movieInfo","id","console","log","setListDataMovie","listData","clearAuthData","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/utils/context/AuthToken.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create the AuthContext\r\nexport const AuthContext = createContext();\r\n\r\n// AuthProvider component\r\nexport const AuthProvider = ({ children }) => {\r\n  // Initialize auth state from localStorage\r\n  const initialAuthState = {\r\n    accessToken: localStorage.getItem('accessToken') || null,\r\n    user: JSON.parse(localStorage.getItem('user')) || null,\r\n  };\r\n\r\n  const [auth, setAuth] = useState(initialAuthState);\r\n  const [movie, setMovie] = useState(null);\r\n  const [lists, setLists] = useState([]);\r\n\r\n  // Function to update authentication data\r\n  const setAuthData = (data) => {\r\n    const updatedAuth = {\r\n      accessToken: data.accessToken,\r\n      user: data.user,\r\n    };\r\n\r\n    // Update state and localStorage\r\n    setAuth(updatedAuth);\r\n    localStorage.setItem('accessToken', data.accessToken);\r\n    localStorage.setItem('user', JSON.stringify(data.user));\r\n    localStorage.setItem('tab', JSON.stringify('cast'));\r\n  };\r\n\r\n  // Function to update movie information\r\n  const setMovieInfo = (movieInfo) => {\r\n    if (movieInfo && movieInfo.id !== movie?.id) { \r\n      console.log(movieInfo);\r\n      setMovie(movieInfo);\r\n    }\r\n  };\r\n\r\n  // Function to update list data\r\n  const setListDataMovie = (listData) => {\r\n    setLists(listData);\r\n  };\r\n\r\n  // Function to clear authentication data\r\n  const clearAuthData = () => {\r\n    // Reset auth state and clear movie and lists\r\n    setAuth({ accessToken: null, user: null });\r\n    setMovie(null);\r\n    setLists([]);\r\n\r\n    // Remove from localStorage\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('tab');\r\n  };\r\n\r\n  // Effect to fetch movie data when access token is present and movie is null\r\n  useEffect(() => {\r\n    if (!movie && auth.accessToken) {\r\n      console.log('Trigger fetching movie data because movie is null');\r\n      // Fetch movie data logic can be added here\r\n    }\r\n  }, [auth.accessToken, movie]); // Dependency array includes only necessary variables\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ auth, setAuthData, clearAuthData, movie, setMovieInfo, lists, setListDataMovie }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}