{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Videos\\\\Videos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport { useParams } from 'react-router-dom';\nimport VideosForm from './VideosForm';\nimport './Videos.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Videos() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const {\n    movieId\n  } = useParams();\n  const [videos, setVideos] = useState([]);\n  const [newVideo, setNewVideo] = useState({\n    url: '',\n    description: '',\n    site: 'YouTube',\n    videoKey: '',\n    videoType: 'Trailer',\n    official: false\n  });\n  const [editingVideo, setEditingVideo] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n  const [importMessage, setImportMessage] = useState('');\n  const [tmdbMovieId, setTmdbMovieId] = useState(null);\n  const getYouTubeVideoId = url => {\n    if (!url) return null;\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] || match[2] : null;\n  };\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setTmdbMovieId(response.data.tmdbId);\n      } catch (error) {\n        console.error(\"Error fetching movie details:\", error);\n      }\n    };\n    const fetchVideos = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}/videos`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        if (Array.isArray(response.data.videos)) {\n          setVideos(response.data.videos);\n        } else {\n          console.error(\"Error: No videos found or videos is not an array\");\n          setVideos([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n        setVideos([]);\n      }\n    };\n    fetchMovieDetails();\n    fetchVideos();\n  }, [movieId, auth.accessToken]);\n  const importVideosFromTMDB = async () => {\n    if (!tmdbMovieId) {\n      setImportMessage('TMDB Movie ID not found');\n      setTimeout(() => setImportMessage(''), 3000);\n      return;\n    }\n    try {\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/movie/${tmdbMovieId}/videos?language=en-US`,\n        headers: {\n          Accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'\n        }\n      });\n      const importedVideos = response.data.results;\n      const importPromises = importedVideos.map(async video => {\n        if (video.site === 'YouTube') {\n          const videoKey = video.key;\n          const videoType = video.type || 'Trailer';\n          const official = video.official || false;\n          const payload = {\n            userId: auth.user.userId,\n            movieId: movieId,\n            url: `https://www.youtube.com/watch?v=${videoKey}`,\n            description: video.name || 'No description',\n            site: video.site || 'YouTube',\n            videoKey: videoKey,\n            videoType: videoType,\n            official: official\n          };\n          try {\n            await axios.post('/videos', payload, {\n              headers: {\n                Authorization: `Bearer ${auth.accessToken}`\n              }\n            });\n          } catch (error) {\n            console.error(`Error importing video ${video.name}:`, error);\n          }\n        }\n      });\n      await Promise.all(importPromises);\n      const updatedVideosResponse = await axios.get(`/movies/${movieId}/videos`, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      setVideos(updatedVideosResponse.data.videos);\n      setImportMessage(`Successfully imported ${importedVideos.filter(v => v.site === 'YouTube').length} videos`);\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error importing videos:\", error);\n      setImportMessage('Failed to import videos');\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n    if (editingVideo) {\n      setEditingVideo(prev => ({\n        ...prev,\n        [name]: fieldValue\n      }));\n    } else {\n      setNewVideo(prev => ({\n        ...prev,\n        [name]: fieldValue\n      }));\n    }\n  };\n  const handleAddVideo = async () => {\n    if (!newVideo.url || !newVideo.description) {\n      alert(\"Please provide both a URL and a description for the video.\");\n      return;\n    }\n    const videoId = getYouTubeVideoId(newVideo.url);\n    if (!videoId) {\n      alert(\"Please provide a valid YouTube URL.\");\n      return;\n    }\n    setIsSaving(true);\n    try {\n      const videoData = {\n        movieId,\n        url: newVideo.url,\n        description: newVideo.description,\n        userId: auth.user.userId,\n        site: 'YouTube',\n        videoKey: videoId,\n        videoType: newVideo.videoType || 'Trailer',\n        official: newVideo.official || false\n      };\n      const response = await axios.post('/videos', videoData, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      setVideos(prevVideos => [...prevVideos, {\n        ...response.data,\n        url: videoData.url,\n        videoKey: videoData.videoKey,\n        description: videoData.description,\n        site: videoData.site,\n        videoType: videoData.videoType,\n        official: videoData.official,\n        dateCreated: new Date().toISOString()\n      }]);\n      setNewVideo({\n        url: '',\n        description: '',\n        site: 'YouTube',\n        videoKey: '',\n        videoType: 'Trailer',\n        official: false\n      });\n      alert(\"Video added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding video:\", error);\n      alert(\"Failed to add video.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleDeleteVideo = async id => {\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\n      try {\n        await axios.delete(`/videos/${id}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setVideos(prevVideos => prevVideos.filter(video => video.id !== id));\n        alert(\"Video deleted successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting video:\", error);\n        alert(\"Failed to delete video.\");\n      }\n    }\n  };\n  const handleUpdateVideo = async () => {\n    const validateFields = () => {\n      if (!editingVideo.url) {\n        alert(\"Please provide a valid URL.\");\n        return false;\n      }\n      if (!editingVideo.description) {\n        alert(\"Please provide a description.\");\n        return false;\n      }\n      return true;\n    };\n    if (!validateFields()) {\n      return;\n    } else {\n      const isConfirm = window.confirm(\"Are you sure you want to update the video?\");\n      if (isConfirm) {\n        const updatedData = {\n          id: editingVideo.id,\n          url: editingVideo.url,\n          description: editingVideo.description,\n          movieId: editingVideo.movieId,\n          site: editingVideo.site || 'YouTube',\n          videoKey: getYouTubeVideoId(editingVideo.url) || editingVideo.videoKey,\n          videoType: editingVideo.videoType || 'Trailer',\n          official: editingVideo.official || false\n        };\n        try {\n          const response = await axios({\n            method: 'patch',\n            url: `/videos/${editingVideo.id}`,\n            data: updatedData,\n            headers: {\n              Accept: 'application/json',\n              Authorization: `Bearer ${auth.accessToken}`\n            }\n          });\n          alert(\"Video updated successfully!\");\n          setVideos(prevVideos => prevVideos.map(video => video.id === editingVideo.id ? {\n            ...video,\n            ...updatedData\n          } : video));\n          setEditingVideo(null);\n        } catch (error) {\n          var _error$response, _error$response$data;\n          alert(`Error updating video: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`);\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-box\",\n    children: [importMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-message\",\n      children: importMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Video-View-Box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Videos for Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-videos\",\n        children: videos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No videos found for this movie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this) : videos.map(video => {\n          const videoId = getYouTubeVideoId(video.url) || video.videoKey;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-video\",\n            children: [videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n              width: \"100%\",\n              height: \"315\",\n              src: `https://www.youtube.com/embed/${videoId}`,\n              title: \"Video\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid video URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container-video\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: video.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Added on: \", video.dateCreated ? new Date(video.dateCreated).toLocaleDateString() : 'Unknown']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Site: \", video.site || 'YouTube']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type: \", video.videoType || 'Trailer']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Official: \", video.official ? 'Yes' : 'No']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => setEditingVideo(video),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteVideo(video.id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 19\n            }, this)]\n          }, video.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Search-Box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"import-button\",\n          type: \"button\",\n          onClick: importVideosFromTMDB,\n          children: \"Import from TMDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VideosForm, {\n      videoData: editingVideo ? editingVideo : newVideo,\n      onSubmit: editingVideo ? handleUpdateVideo : handleAddVideo,\n      onChange: handleInputChange,\n      isSaving: isSaving,\n      editingVideo: editingVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n}\n_s(Videos, \"WKycAeOoJTWKmBZBRf1N8v6S03M=\", false, function () {\n  return [useParams];\n});\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","useParams","VideosForm","jsxDEV","_jsxDEV","Videos","_s","auth","movieId","videos","setVideos","newVideo","setNewVideo","url","description","site","videoKey","videoType","official","editingVideo","setEditingVideo","isSaving","setIsSaving","importMessage","setImportMessage","tmdbMovieId","setTmdbMovieId","getYouTubeVideoId","regex","match","fetchMovieDetails","response","get","headers","Authorization","accessToken","data","tmdbId","error","console","fetchVideos","Array","isArray","importVideosFromTMDB","setTimeout","method","Accept","importedVideos","results","importPromises","map","video","key","type","payload","userId","user","name","post","Promise","all","updatedVideosResponse","filter","v","length","handleInputChange","e","value","checked","target","fieldValue","prev","handleAddVideo","alert","videoId","videoData","prevVideos","dateCreated","Date","toISOString","handleDeleteVideo","id","window","confirm","delete","handleUpdateVideo","validateFields","isConfirm","updatedData","_error$response","_error$response$data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","src","title","frameBorder","allow","allowFullScreen","toLocaleDateString","onClick","onSubmit","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Videos/Videos.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport { useParams } from 'react-router-dom';\r\nimport VideosForm from './VideosForm';\r\nimport './Videos.css';\r\n\r\nfunction Videos() {\r\n  const { auth } = useContext(AuthContext);\r\n  const { movieId } = useParams();\r\n  const [videos, setVideos] = useState([]);\r\n  const [newVideo, setNewVideo] = useState({\r\n    url: '',\r\n    description: '',\r\n    site: 'YouTube',\r\n    videoKey: '',\r\n    videoType: 'Trailer',\r\n    official: false\r\n  });\r\n  const [editingVideo, setEditingVideo] = useState(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [importMessage, setImportMessage] = useState('');\r\n  const [tmdbMovieId, setTmdbMovieId] = useState(null);\r\n\r\n  const getYouTubeVideoId = (url) => {\r\n    if (!url) return null;\r\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\r\n    const match = url.match(regex);\r\n    return match ? (match[1] || match[2]) : null;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchMovieDetails = async () => {\r\n      try {\r\n        const response = await axios.get(`/movies/${movieId}`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n        setTmdbMovieId(response.data.tmdbId);\r\n      } catch (error) {\r\n        console.error(\"Error fetching movie details:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchVideos = async () => {\r\n      try {\r\n        const response = await axios.get(`/movies/${movieId}/videos`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        if (Array.isArray(response.data.videos)) {\r\n          setVideos(response.data.videos);\r\n        } else {\r\n          console.error(\"Error: No videos found or videos is not an array\");\r\n          setVideos([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching videos:\", error);\r\n        setVideos([]);\r\n      }\r\n    };\r\n\r\n    fetchMovieDetails();\r\n    fetchVideos();\r\n  }, [movieId, auth.accessToken]);\r\n\r\n  const importVideosFromTMDB = async () => {\r\n    if (!tmdbMovieId) {\r\n      setImportMessage('TMDB Movie ID not found');\r\n      setTimeout(() => setImportMessage(''), 3000);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/movie/${tmdbMovieId}/videos?language=en-US`,\r\n        headers: {\r\n          Accept: 'application/json',\r\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg', \r\n        },\r\n      });\r\n\r\n      const importedVideos = response.data.results;\r\n\r\n      const importPromises = importedVideos.map(async (video) => {\r\n        if (video.site === 'YouTube') {\r\n          const videoKey = video.key;\r\n          const videoType = video.type || 'Trailer'; \r\n          const official = video.official || false; \r\n\r\n          const payload = {\r\n            userId: auth.user.userId,\r\n            movieId: movieId,\r\n            url: `https://www.youtube.com/watch?v=${videoKey}`,\r\n            description: video.name || 'No description',\r\n            site: video.site || 'YouTube',\r\n            videoKey: videoKey,\r\n            videoType: videoType,\r\n            official: official\r\n          };\r\n\r\n          try {\r\n            await axios.post('/videos', payload, {\r\n              headers: {\r\n                Authorization: `Bearer ${auth.accessToken}`,\r\n              },\r\n            });\r\n          } catch (error) {\r\n            console.error(`Error importing video ${video.name}:`, error);\r\n          }\r\n        }\r\n      });\r\n\r\n      await Promise.all(importPromises);\r\n\r\n      const updatedVideosResponse = await axios.get(`/movies/${movieId}/videos`, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n\r\n      setVideos(updatedVideosResponse.data.videos);\r\n\r\n      setImportMessage(`Successfully imported ${importedVideos.filter(v => v.site === 'YouTube').length} videos`);\r\n\r\n      setTimeout(() => {\r\n        setImportMessage('');\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error(\"Error importing videos:\", error);\r\n      setImportMessage('Failed to import videos');\r\n      \r\n      setTimeout(() => {\r\n        setImportMessage('');\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    const fieldValue = type === 'checkbox' ? checked : value;\r\n    \r\n    if (editingVideo) {\r\n      setEditingVideo((prev) => ({ ...prev, [name]: fieldValue }));\r\n    } else {\r\n      setNewVideo((prev) => ({ ...prev, [name]: fieldValue }));\r\n    }\r\n  };\r\n\r\n  const handleAddVideo = async () => {\r\n    if (!newVideo.url || !newVideo.description) {\r\n      alert(\"Please provide both a URL and a description for the video.\");\r\n      return;\r\n    }\r\n\r\n    const videoId = getYouTubeVideoId(newVideo.url);\r\n\r\n    if (!videoId) {\r\n      alert(\"Please provide a valid YouTube URL.\");\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n    try {\r\n      const videoData = {\r\n        movieId,\r\n        url: newVideo.url,\r\n        description: newVideo.description,\r\n        userId: auth.user.userId,\r\n        site: 'YouTube',\r\n        videoKey: videoId,\r\n        videoType: newVideo.videoType || 'Trailer',\r\n        official: newVideo.official || false\r\n      };\r\n\r\n      const response = await axios.post('/videos', videoData, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n\r\n      setVideos((prevVideos) => [...prevVideos, {\r\n        ...response.data,\r\n        url: videoData.url,\r\n        videoKey: videoData.videoKey,\r\n        description: videoData.description,\r\n        site: videoData.site,\r\n        videoType: videoData.videoType,\r\n        official: videoData.official,\r\n        dateCreated: new Date().toISOString()\r\n      }]);\r\n\r\n      setNewVideo({ url: '', description: '', site: 'YouTube', videoKey: '', videoType: 'Trailer', official: false });\r\n\r\n      alert(\"Video added successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding video:\", error);\r\n      alert(\"Failed to add video.\");\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteVideo = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\r\n      try {\r\n        await axios.delete(`/videos/${id}`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        setVideos((prevVideos) => prevVideos.filter((video) => video.id !== id));\r\n        alert(\"Video deleted successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Error deleting video:\", error);\r\n        alert(\"Failed to delete video.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpdateVideo = async () => {\r\n    const validateFields = () => {\r\n        if (!editingVideo.url) {\r\n            alert(\"Please provide a valid URL.\");\r\n            return false;\r\n        }\r\n        if (!editingVideo.description) {\r\n            alert(\"Please provide a description.\");\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    if (!validateFields()) {\r\n        return;\r\n    } else {\r\n        const isConfirm = window.confirm(\"Are you sure you want to update the video?\");\r\n        if (isConfirm) {\r\n            const updatedData = {\r\n                id: editingVideo.id,\r\n                url: editingVideo.url,\r\n                description: editingVideo.description,\r\n                movieId: editingVideo.movieId, \r\n                site: editingVideo.site || 'YouTube',\r\n                videoKey: getYouTubeVideoId(editingVideo.url) || editingVideo.videoKey,\r\n                videoType: editingVideo.videoType || 'Trailer',\r\n                official: editingVideo.official || false\r\n            };\r\n            try {\r\n                const response = await axios({\r\n                    method: 'patch',\r\n                    url: `/videos/${editingVideo.id}`,\r\n                    data: updatedData,\r\n                    headers: {\r\n                        Accept: 'application/json',\r\n                        Authorization: `Bearer ${auth.accessToken}`,\r\n                    },\r\n                });\r\n                alert(\"Video updated successfully!\");\r\n                setVideos((prevVideos) =>\r\n                    prevVideos.map((video) =>\r\n                        video.id === editingVideo.id ? { ...video, ...updatedData } : video\r\n                    )\r\n                );\r\n                setEditingVideo(null);\r\n            } catch (error) {\r\n                alert(`Error updating video: ${error.response?.data?.message || error.message}`);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n  return (\r\n    <div className=\"video-box\">\r\n      {importMessage && (\r\n        <div className=\"import-message\">\r\n          {importMessage}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"Video-View-Box\">\r\n        <h2>Videos for Movie</h2>\r\n\r\n        <div className=\"card-display-videos\">\r\n          {videos.length === 0 ? (\r\n            <p>No videos found for this movie.</p>\r\n          ) : (\r\n            videos.map((video) => {\r\n              const videoId = getYouTubeVideoId(video.url) || video.videoKey;\r\n              return (\r\n                <div key={video.id} className=\"card-video\">\r\n                  {videoId ? (\r\n                    <iframe\r\n                      width=\"100%\"\r\n                      height=\"315\"\r\n                      src={`https://www.youtube.com/embed/${videoId}`}\r\n                      title=\"Video\"\r\n                      frameBorder=\"0\"\r\n                      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                      allowFullScreen\r\n                    ></iframe>\r\n                  ) : (\r\n                    <p>Invalid video URL</p>\r\n                  )}\r\n                  <div className=\"container-video\">\r\n                    <h4>{video.description}</h4>\r\n                    <p>Added on: {video.dateCreated ? new Date(video.dateCreated).toLocaleDateString() : 'Unknown'}</p>\r\n                    <p>Site: {video.site || 'YouTube'}</p>\r\n                    <p>Type: {video.videoType || 'Trailer'}</p>\r\n                    <p>Official: {video.official ? 'Yes' : 'No'}</p>\r\n                    <div className=\"buttons-group\">\r\n                      <button className=\"edit-button\" onClick={() => setEditingVideo(video)}>\r\n                        Edit\r\n                      </button>\r\n                      <button className=\"delete-button\" onClick={() => handleDeleteVideo(video.id)}>\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Search-Box\">\r\n        <div className=\"search-box-btn\">\r\n          <button\r\n            className=\"import-button\"\r\n            type=\"button\"\r\n            onClick={importVideosFromTMDB}\r\n          >\r\n            Import from TMDB\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <VideosForm\r\n        videoData={editingVideo ? editingVideo : newVideo}\r\n        onSubmit={editingVideo ? handleUpdateVideo : handleAddVideo}\r\n        onChange={handleInputChange}\r\n        isSaving={isSaving}\r\n        editingVideo={editingVideo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Videos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}