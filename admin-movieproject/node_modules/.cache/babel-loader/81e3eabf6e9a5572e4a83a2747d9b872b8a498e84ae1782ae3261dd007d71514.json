{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Videos\\\\Videos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport { useParams } from 'react-router-dom';\nimport VideosForm from './VideosForm';\nimport './Videos.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Videos() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const {\n    movieId\n  } = useParams();\n  const [videos, setVideos] = useState([]);\n  const [newVideo, setNewVideo] = useState({\n    url: '',\n    description: '',\n    site: 'YouTube',\n    videoKey: '',\n    videoType: 'Trailer',\n    official: false\n  });\n  const [editingVideo, setEditingVideo] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n  const [importMessage, setImportMessage] = useState('');\n  const [tmdbMovieId, setTmdbMovieId] = useState(null);\n  const getYouTubeVideoId = url => {\n    if (!url) return null;\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] || match[2] : null;\n  };\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setTmdbMovieId(response.data.tmdbId);\n      } catch (error) {\n        console.error(\"Error fetching movie details:\", error);\n      }\n    };\n    const fetchVideos = async () => {\n      try {\n        const response = await axios.get(`/videos/${movieId}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        if (Array.isArray(response.data)) {\n          setVideos(response.data);\n        } else {\n          console.error(\"Error: No videos found or videos is not an array\");\n          setVideos([]);\n        }\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n        setVideos([]);\n      }\n    };\n    fetchMovieDetails();\n    fetchVideos();\n  }, [movieId, auth.accessToken]);\n  const importVideosFromTMDB = async () => {\n    if (!tmdbMovieId) {\n      setImportMessage('TMDB Movie ID not found');\n      setTimeout(() => setImportMessage(''), 3000);\n      return;\n    }\n    try {\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/movie/${tmdbMovieId}/videos?language=en-US`,\n        headers: {\n          Accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg' // Replace with your TMDB API token\n        }\n      });\n      const importedVideos = response.data.results;\n      const importPromises = importedVideos.map(async video => {\n        if (video.site === 'YouTube') {\n          const videoKey = video.key;\n          const videoType = video.type || 'Trailer';\n          const official = video.official || false;\n          const payload = {\n            userId: auth.user.userId,\n            movieId: movieId,\n            url: `https://www.youtube.com/watch?v=${videoKey}`,\n            description: video.name || 'No description',\n            site: video.site || 'YouTube',\n            videoKey: videoKey,\n            videoType: videoType,\n            official: official\n          };\n          try {\n            await axios.post('/videos', payload, {\n              headers: {\n                Authorization: `Bearer ${auth.accessToken}`\n              }\n            });\n          } catch (error) {\n            console.error(`Error importing video ${video.name}:`, error);\n          }\n        }\n      });\n      await Promise.all(importPromises);\n      const updatedVideosResponse = await axios.get(`/videos/${movieId}`, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      setVideos(updatedVideosResponse.data);\n      setImportMessage(`Successfully imported ${importedVideos.filter(v => v.site === 'YouTube').length} videos`);\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    } catch (error) {\n      console.error(\"Error importing videos:\", error);\n      setImportMessage('Failed to import videos');\n      setTimeout(() => {\n        setImportMessage('');\n      }, 3000);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const fieldValue = type === 'checkbox' ? checked : value;\n    if (editingVideo) {\n      setEditingVideo(prev => ({\n        ...prev,\n        [name]: fieldValue\n      }));\n    } else {\n      setNewVideo(prev => ({\n        ...prev,\n        [name]: fieldValue\n      }));\n    }\n  };\n\n  // Add new video\n  const handleAddVideo = async () => {\n    if (!newVideo.url || !newVideo.description) {\n      alert(\"Please provide both a URL and a description for the video.\");\n      return;\n    }\n    const videoId = getYouTubeVideoId(newVideo.url);\n    if (!videoId) {\n      alert(\"Please provide a valid YouTube URL.\");\n      return;\n    }\n    setIsSaving(true);\n    try {\n      const videoData = {\n        movieId,\n        url: newVideo.url,\n        description: newVideo.description,\n        userId: auth.user.userId,\n        site: 'YouTube',\n        videoKey: videoId,\n        videoType: newVideo.videoType || 'Trailer',\n        official: newVideo.official || false\n      };\n\n      // Use POST request to add new video\n      const response = await axios.post('/videos', videoData, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n\n      // Update local state with the newly added video\n      setVideos(prevVideos => [...prevVideos, response.data]);\n\n      // Reset new video form\n      setNewVideo({\n        url: '',\n        description: '',\n        site: 'YouTube',\n        videoKey: '',\n        videoType: 'Trailer',\n        official: false\n      });\n      alert(\"Video added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding video:\", error);\n      alert(\"Failed to add video.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Delete a specific video\n  const handleDeleteVideo = async id => {\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\n      try {\n        await axios.delete(`/videos/${id}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n\n        // Update local state to remove deleted video\n        setVideos(prevVideos => prevVideos.filter(video => video.id !== id));\n        alert(\"Video deleted successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting video:\", error);\n        alert(\"Failed to delete video.\");\n      }\n    }\n  };\n\n  // Update existing video's information\n  const handleUpdateVideo = async () => {\n    const validateFields = () => {\n      if (!editingVideo.url) {\n        alert(\"Please provide a valid URL.\");\n        return false;\n      }\n      if (!editingVideo.description) {\n        alert(\"Please provide a description.\");\n        return false;\n      }\n      return true;\n    };\n    if (!validateFields()) return;\n    if (window.confirm(\"Are you sure you want to update the video?\")) {\n      // Prepare updated data for PATCH request\n      const updatedData = {\n        id: editingVideo.id,\n        url: editingVideo.url,\n        description: editingVideo.description,\n        movieId,\n        site: editingVideo.site || 'YouTube',\n        videoKey: getYouTubeVideoId(editingVideo.url) || editingVideo.videoKey,\n        videoType: editingVideo.videoType || 'Trailer',\n        official: editingVideo.official || false\n      };\n      try {\n        await axios.patch(`/videos/${editingVideo.id}`, updatedData, {\n          headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        alert(\"Video updated successfully!\");\n\n        // Update local state with edited video's new information\n        setVideos(prevVideos => prevVideos.map(video => video.id === editingVideo.id ? {\n          ...video,\n          ...updatedData\n        } : video));\n\n        // Clear editing state\n        setEditingVideo(null);\n      } catch (error) {\n        alert(`Error updating video: ${error.message}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-box\",\n    children: [importMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-message\",\n      children: importMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Video-View-Box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Videos for Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-videos\",\n        children: videos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No videos found for this movie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 24\n        }, this) : videos.map(video => {\n          const videoId = getYouTubeVideoId(video.url) || video.videoKey;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-video\",\n            children: [videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n              width: \"100%\",\n              height: \"315\",\n              src: `https://www.youtube.com/embed/${videoId}`,\n              title: \"Video\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid video URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 40\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container-video\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: video.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 40\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Added on:\", video.dateCreated ? new Date(video.dateCreated).toLocaleDateString() : 'Unknown']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 40\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Site:\", video.site || 'YouTube']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 40\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Type:\", video.videoType || 'Trailer']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 40\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Official:\", video.official ? 'Yes' : 'No']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 40\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => setEditingVideo(video),\n                  children: \" Edit \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 44\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteVideo(video.id),\n                  children: \" Delete \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 44\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 40\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 36\n            }, this)]\n          }, video.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Search-Box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box-btn\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"import-button\",\n          type: \"button\",\n          onClick: importVideosFromTMDB,\n          children: \" Import from TMDB \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(VideosForm, {\n      videoData: editingVideo ? editingVideo : newVideo,\n      onSubmit: editingVideo ? handleUpdateVideo : handleAddVideo,\n      onChange: handleInputChange,\n      isSaving: isSaving,\n      editingVideo: editingVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 8\n  }, this);\n}\n_s(Videos, \"T0nll1zVkVINne0Z7bC5DnRUKCE=\", false, function () {\n  return [useParams];\n});\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","useParams","VideosForm","jsxDEV","_jsxDEV","Videos","_s","auth","movieId","videos","setVideos","newVideo","setNewVideo","url","description","site","videoKey","videoType","official","editingVideo","setEditingVideo","isSaving","setIsSaving","importMessage","setImportMessage","tmdbMovieId","setTmdbMovieId","getYouTubeVideoId","regex","match","fetchMovieDetails","response","get","headers","Authorization","accessToken","data","tmdbId","error","console","fetchVideos","Array","isArray","importVideosFromTMDB","setTimeout","method","Accept","importedVideos","results","importPromises","map","video","key","type","payload","userId","user","name","post","Promise","all","updatedVideosResponse","filter","v","length","handleInputChange","e","value","checked","target","fieldValue","prev","handleAddVideo","alert","videoId","videoData","prevVideos","handleDeleteVideo","id","window","confirm","delete","handleUpdateVideo","validateFields","updatedData","patch","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","src","title","frameBorder","allow","allowFullScreen","dateCreated","Date","toLocaleDateString","onClick","onSubmit","onChange","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Videos/Videos.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react'; \r\nimport axios from 'axios'; \r\nimport { AuthContext } from '../../../../../utils/context/AuthToken'; \r\nimport { useParams } from 'react-router-dom'; \r\nimport VideosForm from './VideosForm'; \r\nimport './Videos.css'; \r\n\r\nfunction Videos() { \r\n    const { auth } = useContext(AuthContext); \r\n    const { movieId } = useParams(); \r\n    const [videos, setVideos] = useState([]); \r\n    const [newVideo, setNewVideo] = useState({ url: '', description: '', site: 'YouTube', videoKey: '', videoType: 'Trailer', official: false }); \r\n    const [editingVideo, setEditingVideo] = useState(null); \r\n    const [isSaving, setIsSaving] = useState(false); \r\n    const [importMessage, setImportMessage] = useState(''); \r\n    const [tmdbMovieId, setTmdbMovieId] = useState(null); \r\n\r\n    const getYouTubeVideoId = (url) => { \r\n        if (!url) return null; \r\n        const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})|(?:youtu\\.be\\/)([\\w-]{11})/; \r\n        const match = url.match(regex); \r\n        return match ? (match[1] || match[2]) : null; \r\n    }; \r\n\r\n    useEffect(() => { \r\n        const fetchMovieDetails = async () => { \r\n            try { \r\n                const response = await axios.get(`/movies/${movieId}`, { headers: { Authorization: `Bearer ${auth.accessToken}` }, }); \r\n                setTmdbMovieId(response.data.tmdbId); \r\n            } catch (error) { \r\n                console.error(\"Error fetching movie details:\", error); \r\n            } \r\n        }; \r\n\r\n        const fetchVideos = async () => { \r\n            try { \r\n                const response = await axios.get(`/videos/${movieId}`, { headers: { Authorization: `Bearer ${auth.accessToken}` }, });  \r\n                if (Array.isArray(response.data)) {\r\n                    setVideos(response.data);\r\n                } else {\r\n                    console.error(\"Error: No videos found or videos is not an array\");\r\n                    setVideos([]);\r\n                }\r\n            } catch (error) { \r\n                console.error(\"Error fetching videos:\", error); \r\n                setVideos([]); \r\n            } \r\n        }; \r\n\r\n        fetchMovieDetails(); \r\n        fetchVideos(); \r\n    }, [movieId, auth.accessToken]); \r\n\r\n    const importVideosFromTMDB = async () => {\r\n        if (!tmdbMovieId) {\r\n            setImportMessage('TMDB Movie ID not found');\r\n            setTimeout(() => setImportMessage(''), 3000);\r\n            return;\r\n        }\r\n        \r\n        try {\r\n            const response = await axios({\r\n                method: 'get',\r\n                url: `https://api.themoviedb.org/3/movie/${tmdbMovieId}/videos?language=en-US`,\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg', // Replace with your TMDB API token\r\n                },\r\n            });\r\n\r\n            const importedVideos = response.data.results;\r\n            const importPromises = importedVideos.map(async (video) => {\r\n                if (video.site === 'YouTube') {\r\n                    const videoKey = video.key;\r\n                    const videoType = video.type || 'Trailer';\r\n                    const official = video.official || false;\r\n                    const payload = {\r\n                        userId: auth.user.userId,\r\n                        movieId: movieId,\r\n                        url: `https://www.youtube.com/watch?v=${videoKey}`,\r\n                        description: video.name || 'No description',\r\n                        site: video.site || 'YouTube',\r\n                        videoKey: videoKey,\r\n                        videoType: videoType,\r\n                        official: official\r\n                    };\r\n\r\n                    try {\r\n                        await axios.post('/videos', payload, {\r\n                            headers: {\r\n                                Authorization: `Bearer ${auth.accessToken}`,\r\n                            },\r\n                        });\r\n                    } catch (error) {\r\n                        console.error(`Error importing video ${video.name}:`, error);\r\n                    }\r\n                }\r\n            });\r\n\r\n            await Promise.all(importPromises);\r\n            const updatedVideosResponse = await axios.get(`/videos/${movieId}`, {\r\n                headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n            });\r\n            setVideos(updatedVideosResponse.data);\r\n            setImportMessage(`Successfully imported ${importedVideos.filter(v => v.site === 'YouTube').length} videos`);\r\n            setTimeout(() => {\r\n                setImportMessage('');\r\n            }, 3000);\r\n        } catch (error) {\r\n            console.error(\"Error importing videos:\", error);\r\n            setImportMessage('Failed to import videos');\r\n            setTimeout(() => {\r\n                setImportMessage('');\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        const fieldValue = type === 'checkbox' ? checked : value;\r\n        \r\n        if (editingVideo) {\r\n            setEditingVideo((prev) => ({ ...prev, [name]: fieldValue }));\r\n        } else {\r\n            setNewVideo((prev) => ({ ...prev, [name]: fieldValue }));\r\n        }\r\n    };\r\n\r\n    // Add new video\r\n    const handleAddVideo = async () => {\r\n        if (!newVideo.url || !newVideo.description) {\r\n            alert(\"Please provide both a URL and a description for the video.\");\r\n            return;\r\n        }\r\n\r\n        const videoId = getYouTubeVideoId(newVideo.url);\r\n        if (!videoId) {\r\n            alert(\"Please provide a valid YouTube URL.\");\r\n            return;\r\n        }\r\n\r\n        setIsSaving(true);\r\n        \r\n        try {\r\n            const videoData = {\r\n                movieId,\r\n                url: newVideo.url,\r\n                description: newVideo.description,\r\n                userId: auth.user.userId,\r\n                site: 'YouTube',\r\n                videoKey: videoId,\r\n                videoType: newVideo.videoType || 'Trailer',\r\n                official: newVideo.official || false\r\n            };\r\n\r\n            // Use POST request to add new video\r\n            const response = await axios.post('/videos', videoData, {\r\n                headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n            });\r\n\r\n            // Update local state with the newly added video\r\n            setVideos((prevVideos) => [...prevVideos, response.data]);\r\n            \r\n            // Reset new video form\r\n            setNewVideo({ url: '', description: '', site: 'YouTube', videoKey: '', videoType: 'Trailer', official: false });\r\n            \r\n            alert(\"Video added successfully!\");\r\n        } catch (error) {\r\n            console.error(\"Error adding video:\", error);\r\n            alert(\"Failed to add video.\");\r\n        } finally {\r\n            setIsSaving(false);\r\n        }\r\n    };\r\n\r\n    // Delete a specific video\r\n    const handleDeleteVideo = async (id) => {\r\n        if (window.confirm(\"Are you sure you want to delete this video?\")) {\r\n            try {\r\n                await axios.delete(`/videos/${id}`, { headers: { Authorization: `Bearer ${auth.accessToken}` }, });\r\n                \r\n                // Update local state to remove deleted video\r\n                setVideos((prevVideos) => prevVideos.filter((video) => video.id !== id));\r\n                \r\n                alert(\"Video deleted successfully!\");\r\n            } catch (error) {\r\n                console.error(\"Error deleting video:\", error);\r\n                alert(\"Failed to delete video.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    // Update existing video's information\r\n    const handleUpdateVideo = async () => {\r\n        const validateFields = () => {\r\n            if (!editingVideo.url) {\r\n                alert(\"Please provide a valid URL.\");\r\n                return false;\r\n            }\r\n            \r\n            if (!editingVideo.description) {\r\n                alert(\"Please provide a description.\");\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        if (!validateFields()) return;\r\n\r\n        if (window.confirm(\"Are you sure you want to update the video?\")) {\r\n            \r\n            // Prepare updated data for PATCH request\r\n            const updatedData = {\r\n                id: editingVideo.id,\r\n                url: editingVideo.url,\r\n                description: editingVideo.description,\r\n                movieId,\r\n                site: editingVideo.site || 'YouTube',\r\n                videoKey: getYouTubeVideoId(editingVideo.url) || editingVideo.videoKey,\r\n                videoType: editingVideo.videoType || 'Trailer',\r\n                official: editingVideo.official || false\r\n            };\r\n\r\n           try {\r\n               await axios.patch(`/videos/${editingVideo.id}`, updatedData, { headers: { Accept: 'application/json', Authorization: `Bearer ${auth.accessToken}`, }, });\r\n               \r\n               alert(\"Video updated successfully!\");\r\n               \r\n               // Update local state with edited video's new information\r\n               setVideos((prevVideos) =>\r\n                   prevVideos.map((video) =>\r\n                       video.id === editingVideo.id ? { ...video, ...updatedData } : video)\r\n               );\r\n               \r\n               // Clear editing state\r\n               setEditingVideo(null);\r\n           } catch (error) {\r\n               alert(`Error updating video: ${error.message}`);\r\n           }\r\n       }\r\n   };\r\n\r\n   return (\r\n       <div className=\"video-box\">\r\n           {importMessage && (\r\n               <div className=\"import-message\">\r\n                   {importMessage}\r\n               </div>\r\n           )}\r\n           <div className=\"Video-View-Box\">\r\n               <h2>Videos for Movie</h2>\r\n               <div className=\"card-display-videos\">\r\n                   {videos.length === 0 ? (\r\n                       <p>No videos found for this movie.</p>\r\n                   ) : (\r\n                       videos.map((video) => {\r\n                           const videoId = getYouTubeVideoId(video.url) || video.videoKey;\r\n                           return (\r\n                               <div key={video.id} className=\"card-video\">\r\n                                   {videoId ? (\r\n                                       <iframe width=\"100%\" height=\"315\" src={`https://www.youtube.com/embed/${videoId}`} title=\"Video\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\r\n                                   ) : (\r\n                                       <p>Invalid video URL</p>\r\n                                   )}\r\n                                   <div className=\"container-video\">\r\n                                       <h4>{video.description}</h4>\r\n                                       <p>Added on:{video.dateCreated ? new Date(video.dateCreated).toLocaleDateString() : 'Unknown'}</p>\r\n                                       <p>Site:{video.site || 'YouTube'}</p>\r\n                                       <p>Type:{video.videoType || 'Trailer'}</p>\r\n                                       <p>Official:{video.official ? 'Yes' : 'No'}</p>\r\n                                       <div className=\"buttons-group\">\r\n                                           <button className=\"edit-button\" onClick={() => setEditingVideo(video)}> Edit </button>\r\n                                           <button className=\"delete-button\" onClick={() => handleDeleteVideo(video.id)}> Delete </button>\r\n                                       </div>\r\n                                   </div>\r\n                               </div>\r\n                           );\r\n                       })\r\n                   )}\r\n               </div>\r\n           </div>\r\n           <div className=\"Search-Box\">\r\n               <div className=\"search-box-btn\">\r\n                   <button className=\"import-button\" type=\"button\" onClick={importVideosFromTMDB}> Import from TMDB </button>\r\n               </div>\r\n           </div>\r\n           <VideosForm\r\n               videoData={editingVideo ? editingVideo : newVideo}\r\n               onSubmit={editingVideo ? handleUpdateVideo : handleAddVideo}\r\n               onChange={handleInputChange}\r\n               isSaving={isSaving}\r\n               editingVideo={editingVideo}\r\n           />\r\n       </div>\r\n   ); \r\n}\r\n\r\nexport default Videos;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}