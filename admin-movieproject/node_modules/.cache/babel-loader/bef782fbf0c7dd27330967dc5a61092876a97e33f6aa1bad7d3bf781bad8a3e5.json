{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\CastandCrew\\\\CastandCrew.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport axios from 'axios';\nimport './CastandCrew.css';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Casts() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const [query, setQuery] = useState('');\n  const [cast, setCast] = useState([]);\n  const [selectedCast, setSelectedCast] = useState({});\n  const searchRef = useRef();\n  const [notFound, setNotFound] = useState(false);\n  const nameRef = useRef();\n  const characterNameRef = useRef();\n  const urlRef = useRef();\n  const {\n    movieId\n  } = useParams();\n\n  // Hardcoded TMDB API key (do NOT use in production)\n  const apiKey = '6501881fa7adae43af40af405c1c89b4'; // Replace with your actual API key\n\n  // Validate input fields\n  const validateField = (ref, fieldName) => {\n    if (!ref.current || ref.current.value.trim() === '') {\n      alert(`${fieldName} is required.`);\n      return false;\n    }\n    return true;\n  };\n\n  // Fetch all casts for the movie\n  const getAll = useCallback(movie_id => {\n    axios({\n      method: 'get',\n      url: `/movies/${movie_id}`,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    }).then(response => {\n      setCast(response.data.casts);\n    }).catch(error => {\n      var _error$response;\n      console.error(\"Error fetching Casts:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    });\n  }, [auth.accessToken]);\n  useEffect(() => {\n    getAll(movieId);\n  }, [movieId, getAll]);\n  const handleSearchPerson = useCallback(async (page = 1) => {\n    setNotFound(true);\n    try {\n      if (!query || query.trim() === '') {\n        searchRef.current.style.border = '2px solid red';\n        console.log(\"Input is empty or undefined\");\n        setTimeout(() => {\n          searchRef.current.style.border = '1px solid #ccc';\n          setNotFound(false);\n        }, 2000);\n        return;\n      }\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/search/person?query=${query}&include_adult=false&language=en-US&page=${page}`,\n        headers: {\n          accept: 'application/json',\n          Authorization: `Bearer ${apiKey}` // Use the hardcoded API key here\n        }\n      });\n      if (response.data.results.length === 0) {\n        console.log(\"Not Found\");\n        setSelectedCast([]);\n      } else {\n        setNotFound(false);\n        setSelectedCast(response.data.results[0]);\n        console.log(response.data.results);\n      }\n    } catch (error) {\n      console.error(\"Search error:\", error);\n    }\n  }, [query]);\n  const handleSave = async () => {\n    if (!selectedCast || !selectedCast.name || !selectedCast.characterName) {\n      alert(\"Please select a valid cast member.\");\n      return;\n    }\n    try {\n      const dataCast = {\n        userId: auth.user.userId,\n        movieId: movieId,\n        name: selectedCast.name,\n        url: `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`,\n        characterName: selectedCast.characterName\n      };\n      await axios({\n        method: 'POST',\n        url: '/admin/casts',\n        data: dataCast,\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      alert('Added Successfully');\n      setSelectedCast({});\n      handleClear();\n      getAll(movieId);\n    } catch (error) {\n      alert(\"Error: Unable to save cast. Data might be incomplete.\");\n      console.error(error);\n    }\n  };\n  const handleClear = () => {\n    setQuery(\"\");\n    setSelectedCast({});\n  };\n  const handleDelete = async id => {\n    const isConfirm = window.confirm(\"Are you sure you want to delete this cast?\");\n    if (isConfirm) {\n      try {\n        await axios({\n          method: 'delete',\n          url: `/casts/${id}`,\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        getAll(movieId);\n        alert(\"Deleted Successfully!\");\n      } catch (error) {\n        console.error(\"Delete error:\", error);\n      }\n    }\n  };\n  const castupdate = async id => {\n    if (!(selectedCast !== null && selectedCast !== void 0 && selectedCast.id)) {\n      alert(\"No cast selected to update.\");\n      return;\n    }\n    const validateFields = () => {\n      switch (true) {\n        case !validateField(nameRef, \"Name\"):\n          return false;\n        case !validateField(characterNameRef, \"Character Name\"):\n          return false;\n        case !validateField(urlRef, \"URL\"):\n          return false;\n        default:\n          return true;\n      }\n    };\n    if (!validateFields()) {\n      return;\n    } else {\n      const isConfirm = window.confirm(\"Are you sure you want to update the cast?\");\n      if (isConfirm) {\n        const datacast = {\n          id: selectedCast.id,\n          userId: selectedCast.userId,\n          name: selectedCast.name,\n          url: selectedCast.url,\n          characterName: selectedCast.characterName\n        };\n        try {\n          const response = await axios({\n            method: 'patch',\n            url: `/casts/${id}`,\n            data: datacast,\n            headers: {\n              Accept: 'application/json',\n              Authorization: `Bearer ${auth.accessToken}`\n            }\n          });\n          alert('Updated Successfully!');\n          handleClear();\n          getAll(movieId);\n        } catch (error) {\n          alert(\"Error updating cast.\");\n          console.error(error);\n        }\n      }\n    }\n  };\n  const handleImportCast = async () => {\n    try {\n      // Fetch movie details using local movieId\n      const movie = await axios({\n        method: 'get',\n        url: `/movies/${movieId}`,\n        // Fetch movie from your backend using movieId\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      const tmdbId = movie.data.tmdbId; // Assuming you have tmdbId in the movie data\n\n      if (!tmdbId) {\n        alert(\"tmdbId is missing for this movie.\");\n        return;\n      }\n\n      // Make the request to TMDB API\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/movie/${tmdbId}/credits?api_key=${apiKey}`,\n        headers: {\n          accept: 'application/json'\n        }\n      });\n      const castData = response.data.cast.map(actor => ({\n        userId: auth.user.userId,\n        movieId: movieId,\n        // Using local movieId for your database\n        name: actor.name,\n        url: `https://image.tmdb.org/t/p/original/${actor.profile_path}`,\n        characterName: actor.character\n      }));\n\n      // Bulk save cast members to your backend\n      await axios({\n        method: 'POST',\n        url: '/admin/casts/import',\n        data: {\n          cast: castData\n        },\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      alert('Cast imported successfully!');\n      getAll(movieId); // Refresh the cast list\n    } catch (error) {\n      console.error(\"Error importing cast:\", error);\n      alert(\"Failed to import cast.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Cast-View-Box\",\n      children: cast.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-cast\",\n        children: cast.map(actor => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"buttons-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"delete-button\",\n              onClick: () => handleDelete(actor.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"edit-button\",\n              onClick: () => setSelectedCast(actor),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: actor.url,\n            alt: actor.name,\n            className: \"image-casts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: actor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: actor.characterName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this)]\n        }, actor.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-cast\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Cast not found\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Search-Box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"parent-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-box-btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input-search-person\",\n            type: \"text\",\n            value: query,\n            onChange: e => setQuery(e.target.value),\n            placeholder: \"Search cast name\",\n            ref: searchRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-search-person\",\n            onClick: () => handleSearchPerson(1),\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"found\",\n          children: [notFound && /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Cast not found!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 26\n          }, this), selectedCast && selectedCast.name && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: selectedCast.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"image-cast-select\",\n              src: `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`,\n              alt: selectedCast.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Character: \", selectedCast.characterName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n}\n_s(Casts, \"ZI+XeP+Yvcf+3eUnrvanhSt0Pzk=\", false, function () {\n  return [useParams];\n});\n_c = Casts;\nexport default Casts;\nvar _c;\n$RefreshReg$(_c, \"Casts\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useCallback","useRef","AuthContext","axios","useParams","jsxDEV","_jsxDEV","Casts","_s","auth","query","setQuery","cast","setCast","selectedCast","setSelectedCast","searchRef","notFound","setNotFound","nameRef","characterNameRef","urlRef","movieId","apiKey","validateField","ref","fieldName","current","value","trim","alert","getAll","movie_id","method","url","headers","Accept","Authorization","accessToken","then","response","data","casts","catch","error","_error$response","console","message","handleSearchPerson","page","style","border","log","setTimeout","accept","results","length","handleSave","name","characterName","dataCast","userId","user","profile_path","handleClear","handleDelete","id","isConfirm","window","confirm","castupdate","validateFields","datacast","handleImportCast","movie","tmdbId","castData","map","actor","character","className","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/CastandCrew/CastandCrew.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport axios from 'axios';\r\nimport './CastandCrew.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Casts() {\r\n  const { auth } = useContext(AuthContext);\r\n  const [query, setQuery] = useState('');\r\n  const [cast, setCast] = useState([]);\r\n  const [selectedCast, setSelectedCast] = useState({});\r\n  const searchRef = useRef();\r\n  const [notFound, setNotFound] = useState(false);\r\n  const nameRef = useRef();\r\n  const characterNameRef = useRef();\r\n  const urlRef = useRef();\r\n  const { movieId } = useParams();\r\n\r\n  // Hardcoded TMDB API key (do NOT use in production)\r\n  const apiKey = '6501881fa7adae43af40af405c1c89b4'; // Replace with your actual API key\r\n\r\n  // Validate input fields\r\n  const validateField = (ref, fieldName) => {\r\n    if (!ref.current || ref.current.value.trim() === '') {\r\n      alert(`${fieldName} is required.`);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Fetch all casts for the movie\r\n  const getAll = useCallback((movie_id) => {\r\n    axios({\r\n      method: 'get',\r\n      url: `/movies/${movie_id}`,\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${auth.accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setCast(response.data.casts);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching Casts:\", error.response?.data || error.message);\r\n      });\r\n  }, [auth.accessToken]);\r\n\r\n  useEffect(() => {\r\n    getAll(movieId);\r\n  }, [movieId, getAll]);\r\n\r\n  const handleSearchPerson = useCallback(async (page = 1) => {\r\n    setNotFound(true);\r\n    try {\r\n      if (!query || query.trim() === '') {\r\n        searchRef.current.style.border = '2px solid red';\r\n        console.log(\"Input is empty or undefined\");\r\n        setTimeout(() => {\r\n          searchRef.current.style.border = '1px solid #ccc';\r\n          setNotFound(false);\r\n        }, 2000);\r\n        return;\r\n      }\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/search/person?query=${query}&include_adult=false&language=en-US&page=${page}`,\r\n        headers: {\r\n          accept: 'application/json',\r\n          Authorization: `Bearer ${apiKey}`, // Use the hardcoded API key here\r\n        },\r\n      });\r\n\r\n      if (response.data.results.length === 0) {\r\n        console.log(\"Not Found\");\r\n        setSelectedCast([]);\r\n      } else {\r\n        setNotFound(false);\r\n        setSelectedCast(response.data.results[0]);\r\n        console.log(response.data.results);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Search error:\", error);\r\n    }\r\n  }, [query]);\r\n\r\n  const handleSave = async () => {\r\n    if (!selectedCast || !selectedCast.name || !selectedCast.characterName) {\r\n      alert(\"Please select a valid cast member.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const dataCast = {\r\n        userId: auth.user.userId,\r\n        movieId: movieId,\r\n        name: selectedCast.name,\r\n        url: `https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`,\r\n        characterName: selectedCast.characterName,\r\n      };\r\n      await axios({\r\n        method: 'POST',\r\n        url: '/admin/casts',\r\n        data: dataCast,\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,\r\n        },\r\n      });\r\n      alert('Added Successfully');\r\n      setSelectedCast({});\r\n      handleClear();\r\n      getAll(movieId);\r\n    } catch (error) {\r\n      alert(\"Error: Unable to save cast. Data might be incomplete.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setQuery(\"\");\r\n    setSelectedCast({});\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const isConfirm = window.confirm(\"Are you sure you want to delete this cast?\");\r\n    if (isConfirm) {\r\n      try {\r\n        await axios({\r\n          method: 'delete',\r\n          url: `/casts/${id}`,\r\n          headers: {\r\n            Authorization: `Bearer ${auth.accessToken}`,\r\n          },\r\n        });\r\n        getAll(movieId);\r\n        alert(\"Deleted Successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Delete error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const castupdate = async (id) => {\r\n    if (!selectedCast?.id) {\r\n      alert(\"No cast selected to update.\");\r\n      return;\r\n    }\r\n\r\n    const validateFields = () => {\r\n      switch (true) {\r\n        case !validateField(nameRef, \"Name\"):\r\n          return false;\r\n        case !validateField(characterNameRef, \"Character Name\"):\r\n          return false;\r\n        case !validateField(urlRef, \"URL\"):\r\n          return false;\r\n        default:\r\n          return true;\r\n      }\r\n    };\r\n\r\n    if (!validateFields()) {\r\n      return;\r\n    } else {\r\n      const isConfirm = window.confirm(\"Are you sure you want to update the cast?\");\r\n      if (isConfirm) {\r\n        const datacast = {\r\n          id: selectedCast.id,\r\n          userId: selectedCast.userId,\r\n          name: selectedCast.name,\r\n          url: selectedCast.url,\r\n          characterName: selectedCast.characterName,\r\n        };\r\n\r\n        try {\r\n          const response = await axios({\r\n            method: 'patch',\r\n            url: `/casts/${id}`,\r\n            data: datacast,\r\n            headers: {\r\n              Accept: 'application/json',\r\n              Authorization: `Bearer ${auth.accessToken}`,\r\n            },\r\n          });\r\n          alert('Updated Successfully!');\r\n          handleClear();\r\n          getAll(movieId);\r\n        } catch (error) {\r\n          alert(\"Error updating cast.\");\r\n          console.error(error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleImportCast = async () => {\r\n    try {\r\n      // Fetch movie details using local movieId\r\n      const movie = await axios({\r\n        method: 'get',\r\n        url: `/movies/${movieId}`,  // Fetch movie from your backend using movieId\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,\r\n        },\r\n      });\r\n  \r\n      const tmdbId = movie.data.tmdbId;  // Assuming you have tmdbId in the movie data\r\n  \r\n      if (!tmdbId) {\r\n        alert(\"tmdbId is missing for this movie.\");\r\n        return;\r\n      }\r\n  \r\n      // Make the request to TMDB API\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/movie/${tmdbId}/credits?api_key=${apiKey}`,\r\n        headers: {\r\n          accept: 'application/json',\r\n        },\r\n      });\r\n  \r\n      const castData = response.data.cast.map(actor => ({\r\n        userId: auth.user.userId,\r\n        movieId: movieId,  // Using local movieId for your database\r\n        name: actor.name,\r\n        url: `https://image.tmdb.org/t/p/original/${actor.profile_path}`,\r\n        characterName: actor.character,\r\n      }));\r\n  \r\n      // Bulk save cast members to your backend\r\n      await axios({\r\n        method: 'POST',\r\n        url: '/admin/casts/import',\r\n        data: { cast: castData },\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,\r\n        },\r\n      });\r\n  \r\n      alert('Cast imported successfully!');\r\n      getAll(movieId);  // Refresh the cast list\r\n    } catch (error) {\r\n      console.error(\"Error importing cast:\", error);\r\n      alert(\"Failed to import cast.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cast-box\">\r\n      <div className=\"Cast-View-Box\">\r\n        {cast.length > 0 ? (\r\n          <div className=\"card-display-cast\">\r\n            {cast.map((actor) => (\r\n              <div key={actor.id} className=\"card\">\r\n                <div className=\"buttons-group\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"delete-button\"\r\n                    onClick={() => handleDelete(actor.id)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"edit-button\"\r\n                    onClick={() => setSelectedCast(actor)}\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                </div>\r\n                <img src={actor.url} alt={actor.name} className=\"image-casts\" />\r\n                <div className=\"container\">\r\n                  <h4>{actor.name}</h4>\r\n                  <p>{actor.characterName}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-cast\">\r\n            <h3>Cast not found</h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"Search-Box\">\r\n        <div className=\"parent-container\">\r\n          <div className=\"search-box-btn\">\r\n            <input\r\n              className=\"input-search-person\"\r\n              type=\"text\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              placeholder=\"Search cast name\"\r\n              ref={searchRef}\r\n            />\r\n            <button\r\n              className=\"button-search-person\"\r\n              onClick={() => handleSearchPerson(1)}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n          <div className=\"found\">\r\n            {notFound && <h2>Cast not found!</h2>}\r\n            {selectedCast && selectedCast.name && (\r\n              <div>\r\n                <h3>{selectedCast.name}</h3>\r\n                <img\r\n                  className=\"image-cast-select\"\r\n                  src={`https://image.tmdb.org/t/p/original/${selectedCast.profile_path}`}\r\n                  alt={selectedCast.name}\r\n                />\r\n                <p>Character: {selectedCast.characterName}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Casts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}