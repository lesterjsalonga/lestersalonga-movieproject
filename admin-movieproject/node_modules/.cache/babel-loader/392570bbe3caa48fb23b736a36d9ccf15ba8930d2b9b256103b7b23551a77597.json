{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\CastandCrew\\\\CastandCrew.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useState, useCallback, useEffect, useContext } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { AuthContext } from '../../../../../utils/context/AuthToken'; // Adjusted import path\nimport './CastandCrew.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CastAndCrew = () => {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext); // Using AuthContext to get the access token\n  const [query, setQuery] = useState('');\n  const [searchedPersonList, setSearchedPersonList] = useState([]);\n  const [selectedPerson, setSelectedPerson] = useState(undefined);\n  const [addedCast, setAddedCast] = useState([]);\n  const [notFound, setNotFound] = useState(false);\n  const {\n    movieId\n  } = useParams();\n\n  // Fetch cast data for the movie when the component mounts or movieId changes\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setAddedCast(response.data.cast || []);\n      } catch (error) {\n        console.error('Error fetching cast:', error);\n      }\n    };\n    fetchCast();\n  }, [movieId, auth.accessToken]);\n\n  // Search for people using the TMDB API\n  const handleSearch = useCallback(async () => {\n    setNotFound(true);\n    try {\n      if (!query || query.trim() === '') {\n        alert('Please enter a search term.');\n        return;\n      }\n      const response = await axios({\n        method: 'get',\n        url: `https://api.themoviedb.org/3/search/person?query=${query}&include_adult=false&language=en-US&page=1`,\n        headers: {\n          accept: 'application/json',\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      if (response.data.results.length === 0) {\n        setNotFound(true);\n        setSearchedPersonList([]);\n      } else {\n        setNotFound(false);\n        setSearchedPersonList(response.data.results);\n      }\n    } catch (error) {\n      console.error('Error searching for person:', error);\n    }\n  }, [query, auth.accessToken]);\n\n  // Select a person from the search results\n  const handleSelectPerson = person => {\n    setSelectedPerson(person);\n  };\n\n  // Add selected person to the cast list\n  const handleAddCast = () => {\n    if (!selectedPerson) {\n      alert('Please select a person to add as cast.');\n      return;\n    }\n\n    // Avoid duplicates\n    const personExists = addedCast.some(cast => cast.id === selectedPerson.id);\n    if (personExists) {\n      alert('This person is already added to the cast.');\n      return;\n    }\n    setAddedCast(prevCast => [...prevCast, {\n      id: selectedPerson.id,\n      name: selectedPerson.name,\n      url: selectedPerson.profile_path ? `https://image.tmdb.org/t/p/original/${selectedPerson.profile_path}` : '',\n      // Use default image if profile_path is not available\n      characterName: '',\n      // Character name can be added later\n      dateCreated: new Date().toISOString(),\n      dateUpdated: new Date().toISOString()\n    }]);\n    setSelectedPerson(undefined); // Reset selected person\n  };\n\n  // Save the cast list to the backend\n  const handleSaveCast = async () => {\n    if (addedCast.length === 0) {\n      alert('No cast members added.');\n      return;\n    }\n    const castData = addedCast.map(person => ({\n      movieId,\n      userId: auth.user.userId,\n      name: person.name,\n      url: person.url,\n      characterName: person.characterName || '',\n      dateCreated: person.dateCreated,\n      dateUpdated: person.dateUpdated\n    }));\n    try {\n      const response = await axios({\n        method: 'post',\n        url: '/admin/casts',\n        // Adjust this URL to your backend\n        data: {\n          cast: castData\n        },\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      alert('Cast successfully added!');\n      setAddedCast([]);\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding cast:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      alert('Error adding cast.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast-and-crew-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cast & Crew\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: [\"Search Person:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: event => setQuery(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searched-person\",\n        children: searchedPersonList.map(person => /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => handleSelectPerson(person),\n          children: person.name\n        }, person.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), notFound && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No results found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), selectedPerson && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"person-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"person-image\",\n        src: `https://image.tmdb.org/t/p/original/${selectedPerson.profile_path}`,\n        alt: selectedPerson.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"person-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: selectedPerson.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Known for: \", selectedPerson.known_for_department]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Biography: \", selectedPerson.biography || 'No biography available.']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddCast,\n        children: \"Add to Cast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"added-cast\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Added Cast:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: addedCast.map(cast => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"cast-image\",\n            src: cast.url,\n            alt: cast.name,\n            width: 50\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), cast.name, \" (\", cast.characterName || 'Character name not provided', \")\"]\n        }, cast.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), addedCast.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSaveCast,\n      children: \"Save Cast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(CastAndCrew, \"lgkMsQU4TVPoS3bV/YoTtsGppvc=\", false, function () {\n  return [useParams];\n});\n_c = CastAndCrew;\nexport default CastAndCrew;\nvar _c;\n$RefreshReg$(_c, \"CastAndCrew\");","map":{"version":3,"names":["axios","useState","useCallback","useEffect","useContext","useParams","AuthContext","jsxDEV","_jsxDEV","CastAndCrew","_s","auth","query","setQuery","searchedPersonList","setSearchedPersonList","selectedPerson","setSelectedPerson","undefined","addedCast","setAddedCast","notFound","setNotFound","movieId","fetchCast","response","get","headers","Authorization","accessToken","data","cast","error","console","handleSearch","trim","alert","method","url","accept","results","length","handleSelectPerson","person","handleAddCast","personExists","some","id","prevCast","name","profile_path","characterName","dateCreated","Date","toISOString","dateUpdated","handleSaveCast","castData","map","userId","user","_error$response","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","event","target","onClick","src","alt","known_for_department","biography","width","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/CastandCrew/CastandCrew.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport { useState, useCallback, useEffect, useContext } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken'; // Adjusted import path\r\nimport './CastandCrew.css';\r\n\r\nconst CastAndCrew = () => {\r\n  const { auth } = useContext(AuthContext); // Using AuthContext to get the access token\r\n  const [query, setQuery] = useState('');\r\n  const [searchedPersonList, setSearchedPersonList] = useState([]);\r\n  const [selectedPerson, setSelectedPerson] = useState(undefined);\r\n  const [addedCast, setAddedCast] = useState([]);\r\n  const [notFound, setNotFound] = useState(false);\r\n  const { movieId } = useParams();\r\n\r\n  // Fetch cast data for the movie when the component mounts or movieId changes\r\n  useEffect(() => {\r\n    const fetchCast = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://api.themoviedb.org/3/movie/${movieId}/credits`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${auth.accessToken}`,\r\n            },\r\n          }\r\n        );\r\n        setAddedCast(response.data.cast || []);\r\n      } catch (error) {\r\n        console.error('Error fetching cast:', error);\r\n      }\r\n    };\r\n\r\n    fetchCast();\r\n  }, [movieId, auth.accessToken]);\r\n\r\n  // Search for people using the TMDB API\r\n  const handleSearch = useCallback(async () => {\r\n    setNotFound(true);\r\n    try {\r\n      if (!query || query.trim() === '') {\r\n        alert('Please enter a search term.');\r\n        return;\r\n      }\r\n\r\n      const response = await axios({\r\n        method: 'get',\r\n        url: `https://api.themoviedb.org/3/search/person?query=${query}&include_adult=false&language=en-US&page=1`,\r\n        headers: {\r\n          accept: 'application/json',\r\n          Authorization: `Bearer ${auth.accessToken}`,\r\n        },\r\n      });\r\n\r\n      if (response.data.results.length === 0) {\r\n        setNotFound(true);\r\n        setSearchedPersonList([]);\r\n      } else {\r\n        setNotFound(false);\r\n        setSearchedPersonList(response.data.results);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error searching for person:', error);\r\n    }\r\n  }, [query, auth.accessToken]);\r\n\r\n  // Select a person from the search results\r\n  const handleSelectPerson = (person) => {\r\n    setSelectedPerson(person);\r\n  };\r\n\r\n  // Add selected person to the cast list\r\n  const handleAddCast = () => {\r\n    if (!selectedPerson) {\r\n      alert('Please select a person to add as cast.');\r\n      return;\r\n    }\r\n\r\n    // Avoid duplicates\r\n    const personExists = addedCast.some((cast) => cast.id === selectedPerson.id);\r\n    if (personExists) {\r\n      alert('This person is already added to the cast.');\r\n      return;\r\n    }\r\n\r\n    setAddedCast((prevCast) => [\r\n      ...prevCast,\r\n      {\r\n        id: selectedPerson.id,\r\n        name: selectedPerson.name,\r\n        url: selectedPerson.profile_path\r\n          ? `https://image.tmdb.org/t/p/original/${selectedPerson.profile_path}`\r\n          : '', // Use default image if profile_path is not available\r\n        characterName: '', // Character name can be added later\r\n        dateCreated: new Date().toISOString(),\r\n        dateUpdated: new Date().toISOString(),\r\n      },\r\n    ]);\r\n    setSelectedPerson(undefined); // Reset selected person\r\n  };\r\n\r\n  // Save the cast list to the backend\r\n  const handleSaveCast = async () => {\r\n    if (addedCast.length === 0) {\r\n      alert('No cast members added.');\r\n      return;\r\n    }\r\n\r\n    const castData = addedCast.map((person) => ({\r\n      movieId,\r\n      userId: auth.user.userId,\r\n      name: person.name,\r\n      url: person.url,\r\n      characterName: person.characterName || '',\r\n      dateCreated: person.dateCreated,\r\n      dateUpdated: person.dateUpdated,\r\n    }));\r\n\r\n    try {\r\n      const response = await axios({\r\n        method: 'post',\r\n        url: '/admin/casts', // Adjust this URL to your backend\r\n        data: { cast: castData },\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      alert('Cast successfully added!');\r\n      setAddedCast([]);\r\n    } catch (error) {\r\n      console.error('Error adding cast:', error.response?.data || error.message);\r\n      alert('Error adding cast.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='cast-and-crew-container'>\r\n      <h1>Cast & Crew</h1>\r\n\r\n      {/* Search for a person */}\r\n      <div className='search-container'>\r\n        Search Person:\r\n        <input\r\n          type='text'\r\n          value={query}\r\n          onChange={(event) => setQuery(event.target.value)}\r\n        />\r\n        <button type='button' onClick={handleSearch}>\r\n          Search\r\n        </button>\r\n        <div className='searched-person'>\r\n          {searchedPersonList.map((person) => (\r\n            <p key={person.id} onClick={() => handleSelectPerson(person)}>\r\n              {person.name}\r\n            </p>\r\n          ))}\r\n        </div>\r\n        {notFound && <p>No results found</p>}\r\n      </div>\r\n      <hr />\r\n\r\n      {/* Display selected person */}\r\n      {selectedPerson && (\r\n        <div className='person-details'>\r\n          <img\r\n            className='person-image'\r\n            src={`https://image.tmdb.org/t/p/original/${selectedPerson.profile_path}`}\r\n            alt={selectedPerson.name}\r\n          />\r\n          <div className='person-info'>\r\n            <h3>{selectedPerson.name}</h3>\r\n            <p>Known for: {selectedPerson.known_for_department}</p>\r\n            <p>Biography: {selectedPerson.biography || 'No biography available.'}</p>\r\n          </div>\r\n          <button type='button' onClick={handleAddCast}>\r\n            Add to Cast\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Display added cast members */}\r\n      <div className='added-cast'>\r\n        <h2>Added Cast:</h2>\r\n        <ul>\r\n          {addedCast.map((cast) => (\r\n            <li key={cast.id}>\r\n              <img\r\n                className='cast-image'\r\n                src={cast.url}\r\n                alt={cast.name}\r\n                width={50}\r\n              />\r\n              {cast.name} ({cast.characterName || 'Character name not provided'})\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {/* Save Cast */}\r\n      {addedCast.length > 0 && (\r\n        <button type='button' onClick={handleSaveCast}>\r\n          Save Cast\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CastAndCrew;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AACpE,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,wCAAwC,CAAC,CAAC;AACtE,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IAAEC;EAAK,CAAC,GAAGP,UAAU,CAACE,WAAW,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAACiB,SAAS,CAAC;EAC/D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM;IAAEsB;EAAQ,CAAC,GAAGlB,SAAS,CAAC,CAAC;;EAE/B;EACAF,SAAS,CAAC,MAAM;IACd,MAAMqB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAC9B,sCAAsCH,OAAO,UAAU,EACvD;UACEI,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUjB,IAAI,CAACkB,WAAW;UAC3C;QACF,CACF,CAAC;QACDT,YAAY,CAACK,QAAQ,CAACK,IAAI,CAACC,IAAI,IAAI,EAAE,CAAC;MACxC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDR,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACD,OAAO,EAAEZ,IAAI,CAACkB,WAAW,CAAC,CAAC;;EAE/B;EACA,MAAMK,YAAY,GAAGhC,WAAW,CAAC,YAAY;IAC3CoB,WAAW,CAAC,IAAI,CAAC;IACjB,IAAI;MACF,IAAI,CAACV,KAAK,IAAIA,KAAK,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACjCC,KAAK,CAAC,6BAA6B,CAAC;QACpC;MACF;MAEA,MAAMX,QAAQ,GAAG,MAAMzB,KAAK,CAAC;QAC3BqC,MAAM,EAAE,KAAK;QACbC,GAAG,EAAE,oDAAoD1B,KAAK,4CAA4C;QAC1Ge,OAAO,EAAE;UACPY,MAAM,EAAE,kBAAkB;UAC1BX,aAAa,EAAE,UAAUjB,IAAI,CAACkB,WAAW;QAC3C;MACF,CAAC,CAAC;MAEF,IAAIJ,QAAQ,CAACK,IAAI,CAACU,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;QACtCnB,WAAW,CAAC,IAAI,CAAC;QACjBP,qBAAqB,CAAC,EAAE,CAAC;MAC3B,CAAC,MAAM;QACLO,WAAW,CAAC,KAAK,CAAC;QAClBP,qBAAqB,CAACU,QAAQ,CAACK,IAAI,CAACU,OAAO,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC,EAAE,CAACpB,KAAK,EAAED,IAAI,CAACkB,WAAW,CAAC,CAAC;;EAE7B;EACA,MAAMa,kBAAkB,GAAIC,MAAM,IAAK;IACrC1B,iBAAiB,CAAC0B,MAAM,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAAC5B,cAAc,EAAE;MACnBoB,KAAK,CAAC,wCAAwC,CAAC;MAC/C;IACF;;IAEA;IACA,MAAMS,YAAY,GAAG1B,SAAS,CAAC2B,IAAI,CAAEf,IAAI,IAAKA,IAAI,CAACgB,EAAE,KAAK/B,cAAc,CAAC+B,EAAE,CAAC;IAC5E,IAAIF,YAAY,EAAE;MAChBT,KAAK,CAAC,2CAA2C,CAAC;MAClD;IACF;IAEAhB,YAAY,CAAE4B,QAAQ,IAAK,CACzB,GAAGA,QAAQ,EACX;MACED,EAAE,EAAE/B,cAAc,CAAC+B,EAAE;MACrBE,IAAI,EAAEjC,cAAc,CAACiC,IAAI;MACzBX,GAAG,EAAEtB,cAAc,CAACkC,YAAY,GAC5B,uCAAuClC,cAAc,CAACkC,YAAY,EAAE,GACpE,EAAE;MAAE;MACRC,aAAa,EAAE,EAAE;MAAE;MACnBC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACrCC,WAAW,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACtC,CAAC,CACF,CAAC;IACFrC,iBAAiB,CAACC,SAAS,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAMsC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAIrC,SAAS,CAACsB,MAAM,KAAK,CAAC,EAAE;MAC1BL,KAAK,CAAC,wBAAwB,CAAC;MAC/B;IACF;IAEA,MAAMqB,QAAQ,GAAGtC,SAAS,CAACuC,GAAG,CAAEf,MAAM,KAAM;MAC1CpB,OAAO;MACPoC,MAAM,EAAEhD,IAAI,CAACiD,IAAI,CAACD,MAAM;MACxBV,IAAI,EAAEN,MAAM,CAACM,IAAI;MACjBX,GAAG,EAAEK,MAAM,CAACL,GAAG;MACfa,aAAa,EAAER,MAAM,CAACQ,aAAa,IAAI,EAAE;MACzCC,WAAW,EAAET,MAAM,CAACS,WAAW;MAC/BG,WAAW,EAAEZ,MAAM,CAACY;IACtB,CAAC,CAAC,CAAC;IAEH,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAMzB,KAAK,CAAC;QAC3BqC,MAAM,EAAE,MAAM;QACdC,GAAG,EAAE,cAAc;QAAE;QACrBR,IAAI,EAAE;UAAEC,IAAI,EAAE0B;QAAS,CAAC;QACxB9B,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUjB,IAAI,CAACkB,WAAW,EAAE;UAC3C,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFO,KAAK,CAAC,0BAA0B,CAAC;MACjChB,YAAY,CAAC,EAAE,CAAC;IAClB,CAAC,CAAC,OAAOY,KAAK,EAAE;MAAA,IAAA6B,eAAA;MACd5B,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAE,EAAA6B,eAAA,GAAA7B,KAAK,CAACP,QAAQ,cAAAoC,eAAA,uBAAdA,eAAA,CAAgB/B,IAAI,KAAIE,KAAK,CAAC8B,OAAO,CAAC;MAC1E1B,KAAK,CAAC,oBAAoB,CAAC;IAC7B;EACF,CAAC;EAED,oBACE5B,OAAA;IAAKuD,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACtCxD,OAAA;MAAAwD,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGpB5D,OAAA;MAAKuD,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAAC,gBAEhC,eAAAxD,OAAA;QACE6D,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE1D,KAAM;QACb2D,QAAQ,EAAGC,KAAK,IAAK3D,QAAQ,CAAC2D,KAAK,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,eACF5D,OAAA;QAAQ6D,IAAI,EAAC,QAAQ;QAACK,OAAO,EAAExC,YAAa;QAAA8B,QAAA,EAAC;MAE7C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT5D,OAAA;QAAKuD,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAC7BlD,kBAAkB,CAAC4C,GAAG,CAAEf,MAAM,iBAC7BnC,OAAA;UAAmBkE,OAAO,EAAEA,CAAA,KAAMhC,kBAAkB,CAACC,MAAM,CAAE;UAAAqB,QAAA,EAC1DrB,MAAM,CAACM;QAAI,GADNN,MAAM,CAACI,EAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEd,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACL/C,QAAQ,iBAAIb,OAAA;QAAAwD,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACN5D,OAAA;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAGLpD,cAAc,iBACbR,OAAA;MAAKuD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BxD,OAAA;QACEuD,SAAS,EAAC,cAAc;QACxBY,GAAG,EAAE,uCAAuC3D,cAAc,CAACkC,YAAY,EAAG;QAC1E0B,GAAG,EAAE5D,cAAc,CAACiC;MAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC,eACF5D,OAAA;QAAKuD,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BxD,OAAA;UAAAwD,QAAA,EAAKhD,cAAc,CAACiC;QAAI;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC9B5D,OAAA;UAAAwD,QAAA,GAAG,aAAW,EAAChD,cAAc,CAAC6D,oBAAoB;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvD5D,OAAA;UAAAwD,QAAA,GAAG,aAAW,EAAChD,cAAc,CAAC8D,SAAS,IAAI,yBAAyB;QAAA;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CAAC,eACN5D,OAAA;QAAQ6D,IAAI,EAAC,QAAQ;QAACK,OAAO,EAAE9B,aAAc;QAAAoB,QAAA,EAAC;MAE9C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,eAGD5D,OAAA;MAAKuD,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBxD,OAAA;QAAAwD,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB5D,OAAA;QAAAwD,QAAA,EACG7C,SAAS,CAACuC,GAAG,CAAE3B,IAAI,iBAClBvB,OAAA;UAAAwD,QAAA,gBACExD,OAAA;YACEuD,SAAS,EAAC,YAAY;YACtBY,GAAG,EAAE5C,IAAI,CAACO,GAAI;YACdsC,GAAG,EAAE7C,IAAI,CAACkB,IAAK;YACf8B,KAAK,EAAE;UAAG;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACX,CAAC,EACDrC,IAAI,CAACkB,IAAI,EAAC,IAAE,EAAClB,IAAI,CAACoB,aAAa,IAAI,6BAA6B,EAAC,GACpE;QAAA,GARSpB,IAAI,CAACgB,EAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQZ,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EAGLjD,SAAS,CAACsB,MAAM,GAAG,CAAC,iBACnBjC,OAAA;MAAQ6D,IAAI,EAAC,QAAQ;MAACK,OAAO,EAAElB,cAAe;MAAAQ,QAAA,EAAC;IAE/C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1D,EAAA,CAzMID,WAAW;EAAA,QAOKJ,SAAS;AAAA;AAAA2E,EAAA,GAPzBvE,WAAW;AA2MjB,eAAeA,WAAW;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}