{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Videos\\\\Videos.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport './Videos.css';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Videos() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const {\n    movieId\n  } = useParams();\n  const [videos, setVideos] = useState([]);\n  const [newVideo, setNewVideo] = useState({\n    url: '',\n    description: ''\n  });\n  const [editingVideo, setEditingVideo] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n  useEffect(() => {\n    // Fetch videos associated with the current movie\n    const fetchVideos = async () => {\n      try {\n        const response = await axios.get(`/movies/${movieId}/videos`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        console.log('Fetched movies response:', response.data);\n\n        // Check if response.data.videos is an array and set it\n        if (Array.isArray(response.data.videos)) {\n          setVideos(response.data.videos);\n        } else {\n          console.error(\"Error: No videos found in the response or it's not an array\", response.data.videos);\n          setVideos([]); // Reset to empty array if the `videos` key is not an array\n        }\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n        setVideos([]); // Fallback to empty array in case of error\n      }\n    };\n    fetchVideos();\n  }, [movieId, auth.accessToken]);\n\n  // Helper function to extract YouTube video ID from URL\n  const getYouTubeVideoId = url => {\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : null;\n  };\n  const handleAddVideo = async () => {\n    setIsSaving(true);\n    try {\n      const videoData = {\n        movieId,\n        url: newVideo.url,\n        description: newVideo.description,\n        userId: auth.user.userId\n      };\n      const response = await axios.post('/videos', videoData, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n      setVideos(prevVideos => [...prevVideos, response.data]);\n      setNewVideo({\n        url: '',\n        description: ''\n      });\n      alert(\"Video added successfully!\");\n    } catch (error) {\n      console.error(\"Error adding video:\", error);\n      alert(\"Failed to add video.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  const handleDeleteVideo = async id => {\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\n      try {\n        await axios.delete(`/videos/${id}`, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}`\n          }\n        });\n        setVideos(prevVideos => prevVideos.filter(video => video.id !== id));\n        alert(\"Video deleted successfully!\");\n      } catch (error) {\n        console.error(\"Error deleting video:\", error);\n        alert(\"Failed to delete video.\");\n      }\n    }\n  };\n  const handleUpdateVideo = async () => {\n    setIsSaving(true);\n\n    // Step 1: Validate the form fields\n    const validateFields = () => {\n      const isUrlValid = newVideo.url && getYouTubeVideoId(newVideo.url);\n      if (!isUrlValid) {\n        alert(\"Invalid YouTube link. Please enter a valid URL.\");\n        return false;\n      }\n      const isDescriptionValid = newVideo.description.trim().length > 0;\n      if (!isDescriptionValid) {\n        alert(\"Please enter a video description.\");\n        return false;\n      }\n      return true;\n    };\n    if (!validateFields()) {\n      setIsSaving(false);\n      return; // Stop if validation fails\n    }\n\n    // Step 2: Confirm the update with the user\n    const isConfirm = window.confirm(\"Are you sure you want to update this video?\");\n    if (!isConfirm) {\n      setIsSaving(false);\n      return; // Stop if the user cancels the update\n    }\n\n    // Step 3: Prepare the data to be sent\n    const updatedData = {\n      url: newVideo.url,\n      description: newVideo.description\n    };\n    try {\n      // Step 4: Send the update request to the backend\n      const response = await axios.patch(`/movies/${movieId}/videos/${editingVideo.id}`, updatedData, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}`\n        }\n      });\n\n      // Step 5: Handle success\n      setVideos(prevVideos => prevVideos.map(video => video.id === editingVideo.id ? {\n        ...video,\n        ...updatedData\n      } : video));\n      setEditingVideo(null); // Reset the editing state\n      setNewVideo({\n        url: '',\n        description: ''\n      }); // Clear the form fields\n      alert(\"Video updated successfully!\");\n      console.log(response.data); // Log the response for debugging\n\n      // Optionally, refresh the video list (if needed)\n      // fetchVideos(); // Or call any function to reload the videos from the server\n    } catch (error) {\n      console.error(\"Error updating video:\", error);\n      alert(\"Failed to update video. Please try again.\");\n    } finally {\n      setIsSaving(false); // Reset saving state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Video-View-Box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Videos for Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-display-videos\",\n        children: videos.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No videos found for this movie.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this) : videos.map(video => {\n          const videoId = getYouTubeVideoId(video.url);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-video\",\n            children: [videoId ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n              width: \"100%\",\n              height: \"315\",\n              src: `https://www.youtube.com/embed/${videoId}`,\n              title: \"Video\",\n              frameBorder: \"0\",\n              allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n              allowFullScreen: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Invalid video URL\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container-video\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: video.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Added on: \", new Date(video.dateCreated).toLocaleDateString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"buttons-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => setEditingVideo(video),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"delete-button\",\n                  onClick: () => handleDeleteVideo(video.id),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this)]\n          }, video.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Video-Search-Box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"url\",\n        placeholder: \"Video URL\",\n        value: editingVideo ? editingVideo.url : newVideo.url,\n        onChange: handleInputChange,\n        className: \"video-search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"description\",\n        placeholder: \"Video Description\",\n        value: editingVideo ? editingVideo.description : newVideo.description,\n        onChange: handleInputChange,\n        className: \"video-search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-search-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"search-btn\",\n          onClick: editingVideo ? handleUpdateVideo : handleAddVideo,\n          disabled: isSaving,\n          children: isSaving ? 'Saving...' : editingVideo ? 'Update Video' : 'Add Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n_s(Videos, \"5gqIX21gfEHeRStE2OQ62Gwq68w=\", false, function () {\n  return [useParams];\n});\n_c = Videos;\nexport default Videos;\nvar _c;\n$RefreshReg$(_c, \"Videos\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","AuthContext","useParams","jsxDEV","_jsxDEV","Videos","_s","auth","movieId","videos","setVideos","newVideo","setNewVideo","url","description","editingVideo","setEditingVideo","isSaving","setIsSaving","fetchVideos","response","get","headers","Authorization","accessToken","console","log","data","Array","isArray","error","getYouTubeVideoId","regex","match","handleAddVideo","videoData","userId","user","post","prevVideos","alert","handleDeleteVideo","id","window","confirm","delete","filter","video","handleUpdateVideo","validateFields","isUrlValid","isDescriptionValid","trim","length","isConfirm","updatedData","patch","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","videoId","width","height","src","title","frameBorder","allow","allowFullScreen","Date","dateCreated","toLocaleDateString","onClick","type","name","placeholder","value","onChange","handleInputChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Videos/Videos.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport './Videos.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Videos() {\r\n  const { auth } = useContext(AuthContext);\r\n  const { movieId } = useParams();\r\n  const [videos, setVideos] = useState([]);\r\n  const [newVideo, setNewVideo] = useState({ url: '', description: '' });\r\n  const [editingVideo, setEditingVideo] = useState(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch videos associated with the current movie\r\n    const fetchVideos = async () => {\r\n      try {\r\n        const response = await axios.get(`/movies/${movieId}/videos`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        console.log('Fetched movies response:', response.data);\r\n\r\n        // Check if response.data.videos is an array and set it\r\n        if (Array.isArray(response.data.videos)) {\r\n          setVideos(response.data.videos);\r\n        } else {\r\n          console.error(\"Error: No videos found in the response or it's not an array\", response.data.videos);\r\n          setVideos([]); // Reset to empty array if the `videos` key is not an array\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching videos:\", error);\r\n        setVideos([]); // Fallback to empty array in case of error\r\n      }\r\n    };\r\n\r\n    fetchVideos();\r\n  }, [movieId, auth.accessToken]);\r\n\r\n  // Helper function to extract YouTube video ID from URL\r\n  const getYouTubeVideoId = (url) => {\r\n    const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/))?(?:watch\\?v=|e(?:mbed)\\/)([\\w-]{11})/;\r\n    const match = url.match(regex);\r\n    return match ? match[1] : null;\r\n  };\r\n\r\n  const handleAddVideo = async () => {\r\n    setIsSaving(true);\r\n    try {\r\n      const videoData = {\r\n        movieId,\r\n        url: newVideo.url,\r\n        description: newVideo.description,\r\n        userId: auth.user.userId,\r\n      };\r\n\r\n      const response = await axios.post('/videos', videoData, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n\r\n      setVideos((prevVideos) => [...prevVideos, response.data]);\r\n      setNewVideo({ url: '', description: '' });\r\n      alert(\"Video added successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding video:\", error);\r\n      alert(\"Failed to add video.\");\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteVideo = async (id) => {\r\n    if (window.confirm(\"Are you sure you want to delete this video?\")) {\r\n      try {\r\n        await axios.delete(`/videos/${id}`, {\r\n          headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n        });\r\n\r\n        setVideos((prevVideos) => prevVideos.filter((video) => video.id !== id));\r\n        alert(\"Video deleted successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Error deleting video:\", error);\r\n        alert(\"Failed to delete video.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpdateVideo = async () => {\r\n    setIsSaving(true);\r\n  \r\n    // Step 1: Validate the form fields\r\n    const validateFields = () => {\r\n      const isUrlValid = newVideo.url && getYouTubeVideoId(newVideo.url);\r\n      if (!isUrlValid) {\r\n        alert(\"Invalid YouTube link. Please enter a valid URL.\");\r\n        return false;\r\n      }\r\n  \r\n      const isDescriptionValid = newVideo.description.trim().length > 0;\r\n      if (!isDescriptionValid) {\r\n        alert(\"Please enter a video description.\");\r\n        return false;\r\n      }\r\n  \r\n      return true;\r\n    };\r\n  \r\n    if (!validateFields()) {\r\n      setIsSaving(false);\r\n      return; // Stop if validation fails\r\n    }\r\n  \r\n    // Step 2: Confirm the update with the user\r\n    const isConfirm = window.confirm(\"Are you sure you want to update this video?\");\r\n    if (!isConfirm) {\r\n      setIsSaving(false);\r\n      return; // Stop if the user cancels the update\r\n    }\r\n  \r\n    // Step 3: Prepare the data to be sent\r\n    const updatedData = {\r\n      url: newVideo.url,\r\n      description: newVideo.description,\r\n    };\r\n  \r\n    try {\r\n      // Step 4: Send the update request to the backend\r\n      const response = await axios.patch(`/movies/${movieId}/videos/${editingVideo.id}`, updatedData, {\r\n        headers: { Authorization: `Bearer ${auth.accessToken}` },\r\n      });\r\n  \r\n      // Step 5: Handle success\r\n      setVideos((prevVideos) =>\r\n        prevVideos.map((video) =>\r\n          video.id === editingVideo.id ? { ...video, ...updatedData } : video\r\n        )\r\n      );\r\n      setEditingVideo(null); // Reset the editing state\r\n      setNewVideo({ url: '', description: '' }); // Clear the form fields\r\n      alert(\"Video updated successfully!\");\r\n      console.log(response.data); // Log the response for debugging\r\n  \r\n      // Optionally, refresh the video list (if needed)\r\n      // fetchVideos(); // Or call any function to reload the videos from the server\r\n  \r\n    } catch (error) {\r\n      console.error(\"Error updating video:\", error);\r\n      alert(\"Failed to update video. Please try again.\");\r\n    } finally {\r\n      setIsSaving(false); // Reset saving state\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"video-box\">\r\n      <div className=\"Video-View-Box\">\r\n        <h2>Videos for Movie</h2>\r\n\r\n        <div className=\"card-display-videos\">\r\n          {videos.length === 0 ? (\r\n            <p>No videos found for this movie.</p>\r\n          ) : (\r\n            videos.map((video) => {\r\n              const videoId = getYouTubeVideoId(video.url);\r\n              return (\r\n                <div key={video.id} className=\"card-video\">\r\n                  {videoId ? (\r\n                    <iframe\r\n                      width=\"100%\"\r\n                      height=\"315\"\r\n                      src={`https://www.youtube.com/embed/${videoId}`}\r\n                      title=\"Video\"\r\n                      frameBorder=\"0\"\r\n                      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n                      allowFullScreen\r\n                    ></iframe>\r\n                  ) : (\r\n                    <p>Invalid video URL</p>\r\n                  )}\r\n                  <div className=\"container-video\">\r\n                    <h4>{video.description}</h4>\r\n                    <p>Added on: {new Date(video.dateCreated).toLocaleDateString()}</p>\r\n                    <div className=\"buttons-group\">\r\n                      <button className=\"edit-button\" onClick={() => setEditingVideo(video)}>\r\n                        Edit\r\n                      </button>\r\n                      <button className=\"delete-button\" onClick={() => handleDeleteVideo(video.id)}>\r\n                        Delete\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Video-Search-Box\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"url\"\r\n          placeholder=\"Video URL\"\r\n          value={editingVideo ? editingVideo.url : newVideo.url}\r\n          onChange={handleInputChange}\r\n          className=\"video-search-input\"\r\n        />\r\n        <textarea\r\n          name=\"description\"\r\n          placeholder=\"Video Description\"\r\n          value={editingVideo ? editingVideo.description : newVideo.description}\r\n          onChange={handleInputChange}\r\n          className=\"video-search-input\"\r\n        ></textarea>\r\n        <div className=\"video-search-buttons\">\r\n          <button\r\n            className=\"search-btn\"\r\n            onClick={editingVideo ? handleUpdateVideo : handleAddVideo}\r\n            disabled={isSaving}\r\n          >\r\n            {isSaving ? 'Saving...' : editingVideo ? 'Update Video' : 'Add Video'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Videos;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}