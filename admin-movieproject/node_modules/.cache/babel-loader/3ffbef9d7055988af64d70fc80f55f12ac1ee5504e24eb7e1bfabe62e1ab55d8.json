{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = () => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [searchedMovieList, setSearchedMovieList] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(undefined);\n  const [movie, setMovie] = useState(undefined);\n  const [notFound, setNotFound] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const {\n    movieId\n  } = useParams();\n  const API_BASE_URL = 'https://api.themoviedb.org/3';\n  const TMDB_API_KEY = 'YOUR_TMDB_API_KEY'; // You need to replace this with your actual API key\n  const TMDB_HEADERS = {\n    Accept: 'application/json'\n  };\n  const generateImageUrl = path => {\n    return path ? `https://image.tmdb.org/t/p/original/${path}` : '';\n  };\n  const handleSearch = useCallback(async (page = 1) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.get(`${API_BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${TMDB_API_KEY}`, {\n        headers: TMDB_HEADERS\n      });\n      if (response.data.results.length === 0) {\n        setNotFound(true);\n        setSearchedMovieList([]);\n        setTotalPages(0);\n      } else {\n        setSearchedMovieList(response.data.results);\n        setTotalPages(response.data.total_pages);\n        setNotFound(false);\n      }\n    } catch (err) {\n      setError('Error fetching movies. Please try again later.');\n      console.error(err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [query]);\n  const handleSelectMovie = async movie => {\n    setSelectedMovie(movie);\n\n    // Fetch movie details, cast, videos, and photos\n    try {\n      const movieDetails = await axios.get(`${API_BASE_URL}/movie/${movie.id}?api_key=${TMDB_API_KEY}`);\n      const castDetails = await axios.get(`${API_BASE_URL}/movie/${movie.id}/credits?api_key=${TMDB_API_KEY}`);\n      const videoDetails = await axios.get(`${API_BASE_URL}/movie/${movie.id}/videos?api_key=${TMDB_API_KEY}`);\n      const photoDetails = await axios.get(`${API_BASE_URL}/movie/${movie.id}/images?api_key=${TMDB_API_KEY}`);\n      const movieData = {\n        ...movieDetails.data,\n        cast: castDetails.data.cast,\n        videos: videoDetails.data.results,\n        photos: photoDetails.data.backdrops\n      };\n      setMovie(movieData);\n    } catch (err) {\n      setError('Error fetching movie details, cast, videos, or photos.');\n      console.error(err);\n    }\n  };\n  const handleSave = async () => {\n    const accessToken = localStorage.getItem('accessToken');\n    if (!selectedMovie) {\n      alert('Please search and select a movie.');\n      return;\n    }\n\n    // Movie data structure\n    const movieData = {\n      tmdbId: selectedMovie.id,\n      title: selectedMovie.title,\n      overview: selectedMovie.overview,\n      popularity: parseFloat(selectedMovie.popularity),\n      releaseDate: selectedMovie.release_date,\n      voteAverage: parseFloat(selectedMovie.vote_average),\n      backdropPath: generateImageUrl(selectedMovie.backdrop_path),\n      posterPath: generateImageUrl(selectedMovie.poster_path),\n      isFeatured: selectedMovie.isFeatured || false\n    };\n\n    // Cast, photos, and videos data\n    const castData = selectedMovie.cast.map(actor => ({\n      movieId: selectedMovie.id,\n      userId: 1,\n      // Assuming user ID for the logged-in user (update as needed)\n      name: actor.name,\n      characterName: actor.character,\n      url: actor.profile_path ? generateImageUrl(actor.profile_path) : ''\n    }));\n    const videoData = selectedMovie.videos.map(video => ({\n      movieId: selectedMovie.id,\n      userId: 1,\n      // Assuming user ID for the logged-in user (update as needed)\n      url: `https://www.youtube.com/watch?v=${video.key}`,\n      description: video.name\n    }));\n    const photoData = selectedMovie.photos.map(photo => ({\n      movieId: selectedMovie.id,\n      userId: 1,\n      // Assuming user ID for the logged-in user (update as needed)\n      url: generateImageUrl(photo.file_path),\n      description: photo.file_path // You may want to have a more descriptive field\n    }));\n    try {\n      // Save the movie data\n      let response;\n      if (movieId) {\n        response = await axios.patch(`/movies/${movieId}`, movieData, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n      } else {\n        response = await axios.post('/movies', movieData, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n      }\n      console.log('Movie response:', response);\n\n      // Save cast data\n      await Promise.all(castData.map(cast => axios.post('/casts', cast, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      })));\n\n      // Save video data\n      await Promise.all(videoData.map(video => axios.post('/videos', video, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      })));\n\n      // Save photo data\n      await Promise.all(photoData.map(photo => axios.post('/photos', photo, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      })));\n      alert('Movie, cast, photos, and videos saved successfully!');\n      navigate('/main/movies');\n    } catch (err) {\n      setError('Error saving data. Please try again later.');\n      console.error('Save error:', err.response);\n    }\n  };\n  useEffect(() => {\n    if (movieId) {\n      const fetchMovie = async () => {\n        try {\n          const response = await axios.get(`/movies/${movieId}`);\n          setMovie(response.data);\n          setSelectedMovie(response.data); // For updating the selectedMovie state if needed\n        } catch (err) {\n          setError('Error fetching movie details. Please try again later.');\n          console.error(err);\n        }\n      };\n      fetchMovie();\n    }\n  }, [movieId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: movieId ? 'Edit Movie' : 'Create Movie'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Search for a movie...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleSearch(),\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }, this), searchedMovieList.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleSelectMovie(movie),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: generateImageUrl(movie.poster_path),\n        alt: movie.title,\n        style: {\n          width: '100px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)), selectedMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Selected Movie: \", selectedMovie.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"StWVfHnDERXWeryiPTsEURpTHLA=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useParams","axios","jsxDEV","_jsxDEV","Form","_s","query","setQuery","searchedMovieList","setSearchedMovieList","selectedMovie","setSelectedMovie","undefined","movie","setMovie","notFound","setNotFound","currentPage","setCurrentPage","totalPages","setTotalPages","isLoading","setIsLoading","error","setError","navigate","movieId","API_BASE_URL","TMDB_API_KEY","TMDB_HEADERS","Accept","generateImageUrl","path","handleSearch","page","response","get","headers","data","results","length","total_pages","err","console","handleSelectMovie","movieDetails","id","castDetails","videoDetails","photoDetails","movieData","cast","videos","photos","backdrops","handleSave","accessToken","localStorage","getItem","alert","tmdbId","title","overview","popularity","parseFloat","releaseDate","release_date","voteAverage","vote_average","backdropPath","backdrop_path","posterPath","poster_path","isFeatured","castData","map","actor","userId","name","characterName","character","url","profile_path","videoData","video","key","description","photoData","photo","file_path","patch","Authorization","post","log","Promise","all","fetchMovie","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","src","alt","style","width","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/Form.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Form = () => {\r\n  const [query, setQuery] = useState('');\r\n  const [searchedMovieList, setSearchedMovieList] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(undefined);\r\n  const [movie, setMovie] = useState(undefined);\r\n  const [notFound, setNotFound] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n  const { movieId } = useParams();\r\n\r\n  const API_BASE_URL = 'https://api.themoviedb.org/3';\r\n  const TMDB_API_KEY = 'YOUR_TMDB_API_KEY';  // You need to replace this with your actual API key\r\n  const TMDB_HEADERS = {\r\n    Accept: 'application/json',\r\n  };\r\n\r\n  const generateImageUrl = (path) => {\r\n    return path ? `https://image.tmdb.org/t/p/original/${path}` : '';\r\n  };\r\n\r\n  const handleSearch = useCallback(async (page = 1) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get(\r\n        `${API_BASE_URL}/search/movie?query=${query}&include_adult=false&language=en-US&page=${page}&api_key=${TMDB_API_KEY}`,\r\n        { headers: TMDB_HEADERS }\r\n      );\r\n\r\n      if (response.data.results.length === 0) {\r\n        setNotFound(true);\r\n        setSearchedMovieList([]);\r\n        setTotalPages(0);\r\n      } else {\r\n        setSearchedMovieList(response.data.results);\r\n        setTotalPages(response.data.total_pages);\r\n        setNotFound(false);\r\n      }\r\n    } catch (err) {\r\n      setError('Error fetching movies. Please try again later.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [query]);\r\n\r\n  const handleSelectMovie = async (movie) => {\r\n    setSelectedMovie(movie);\r\n    \r\n    // Fetch movie details, cast, videos, and photos\r\n    try {\r\n      const movieDetails = await axios.get(\r\n        `${API_BASE_URL}/movie/${movie.id}?api_key=${TMDB_API_KEY}`\r\n      );\r\n\r\n      const castDetails = await axios.get(\r\n        `${API_BASE_URL}/movie/${movie.id}/credits?api_key=${TMDB_API_KEY}`\r\n      );\r\n\r\n      const videoDetails = await axios.get(\r\n        `${API_BASE_URL}/movie/${movie.id}/videos?api_key=${TMDB_API_KEY}`\r\n      );\r\n\r\n      const photoDetails = await axios.get(\r\n        `${API_BASE_URL}/movie/${movie.id}/images?api_key=${TMDB_API_KEY}`\r\n      );\r\n\r\n      const movieData = {\r\n        ...movieDetails.data,\r\n        cast: castDetails.data.cast,\r\n        videos: videoDetails.data.results,\r\n        photos: photoDetails.data.backdrops,\r\n      };\r\n      \r\n      setMovie(movieData);\r\n    } catch (err) {\r\n      setError('Error fetching movie details, cast, videos, or photos.');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    if (!selectedMovie) {\r\n      alert('Please search and select a movie.');\r\n      return;\r\n    }\r\n\r\n    // Movie data structure\r\n    const movieData = {\r\n      tmdbId: selectedMovie.id,\r\n      title: selectedMovie.title,\r\n      overview: selectedMovie.overview,\r\n      popularity: parseFloat(selectedMovie.popularity),\r\n      releaseDate: selectedMovie.release_date,\r\n      voteAverage: parseFloat(selectedMovie.vote_average),\r\n      backdropPath: generateImageUrl(selectedMovie.backdrop_path),\r\n      posterPath: generateImageUrl(selectedMovie.poster_path),\r\n      isFeatured: selectedMovie.isFeatured || false,\r\n    };\r\n\r\n    // Cast, photos, and videos data\r\n    const castData = selectedMovie.cast.map((actor) => ({\r\n      movieId: selectedMovie.id,\r\n      userId: 1,  // Assuming user ID for the logged-in user (update as needed)\r\n      name: actor.name,\r\n      characterName: actor.character,\r\n      url: actor.profile_path ? generateImageUrl(actor.profile_path) : '',\r\n    }));\r\n\r\n    const videoData = selectedMovie.videos.map((video) => ({\r\n      movieId: selectedMovie.id,\r\n      userId: 1,  // Assuming user ID for the logged-in user (update as needed)\r\n      url: `https://www.youtube.com/watch?v=${video.key}`,\r\n      description: video.name,\r\n    }));\r\n\r\n    const photoData = selectedMovie.photos.map((photo) => ({\r\n      movieId: selectedMovie.id,\r\n      userId: 1,  // Assuming user ID for the logged-in user (update as needed)\r\n      url: generateImageUrl(photo.file_path),\r\n      description: photo.file_path,  // You may want to have a more descriptive field\r\n    }));\r\n\r\n    try {\r\n      // Save the movie data\r\n      let response;\r\n      if (movieId) {\r\n        response = await axios.patch(`/movies/${movieId}`, movieData, {\r\n          headers: { Authorization: `Bearer ${accessToken}` },\r\n        });\r\n      } else {\r\n        response = await axios.post('/movies', movieData, {\r\n          headers: { Authorization: `Bearer ${accessToken}` },\r\n        });\r\n      }\r\n\r\n      console.log('Movie response:', response);\r\n\r\n      // Save cast data\r\n      await Promise.all(\r\n        castData.map((cast) =>\r\n          axios.post('/casts', cast, { headers: { Authorization: `Bearer ${accessToken}` } })\r\n        )\r\n      );\r\n\r\n      // Save video data\r\n      await Promise.all(\r\n        videoData.map((video) =>\r\n          axios.post('/videos', video, { headers: { Authorization: `Bearer ${accessToken}` } })\r\n        )\r\n      );\r\n\r\n      // Save photo data\r\n      await Promise.all(\r\n        photoData.map((photo) =>\r\n          axios.post('/photos', photo, { headers: { Authorization: `Bearer ${accessToken}` } })\r\n        )\r\n      );\r\n\r\n      alert('Movie, cast, photos, and videos saved successfully!');\r\n      navigate('/main/movies');\r\n    } catch (err) {\r\n      setError('Error saving data. Please try again later.');\r\n      console.error('Save error:', err.response);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (movieId) {\r\n      const fetchMovie = async () => {\r\n        try {\r\n          const response = await axios.get(`/movies/${movieId}`);\r\n          setMovie(response.data);\r\n          setSelectedMovie(response.data); // For updating the selectedMovie state if needed\r\n        } catch (err) {\r\n          setError('Error fetching movie details. Please try again later.');\r\n          console.error(err);\r\n        }\r\n      };\r\n\r\n      fetchMovie();\r\n    }\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{movieId ? 'Edit Movie' : 'Create Movie'}</h1>\r\n      {/* Add your UI for searching and selecting a movie */}\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        placeholder=\"Search for a movie...\"\r\n      />\r\n      <button onClick={() => handleSearch()}>Search</button>\r\n\r\n      {isLoading && <p>Loading...</p>}\r\n      {error && <p>{error}</p>}\r\n\r\n      {searchedMovieList.map((movie) => (\r\n        <div key={movie.id} onClick={() => handleSelectMovie(movie)}>\r\n          <h2>{movie.title}</h2>\r\n          <img\r\n            src={generateImageUrl(movie.poster_path)}\r\n            alt={movie.title}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </div>\r\n      ))}\r\n\r\n      {selectedMovie && (\r\n        <div>\r\n          <h3>Selected Movie: {selectedMovie.title}</h3>\r\n          <button onClick={handleSave}>Save</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}