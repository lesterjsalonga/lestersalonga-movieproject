{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\CastandCrew\\\\CastandCrew.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useContext, useCallback } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { AuthContext } from '../../../../context/AuthToken';\nimport './CastandCrew.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CastAndCrew = () => {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext); // Use AuthContext to get the user's auth token\n  const [savedCast, setSavedCast] = useState([]); // Store saved cast data\n  const [importedCast, setImportedCast] = useState([]); // Store imported cast data\n  const [importStatus, setImportStatus] = useState(''); // Status message\n  const [selectedMovie, setSelectedMovie] = useState(null); // Store selected movie data\n  const {\n    movieId\n  } = useParams(); // Get movieId from the URL\n\n  const API_BASE_URL = 'http://localhost:5000'; // API base URL (adjust as necessary)\n  const TMDB_API_URL = 'https://api.themoviedb.org/3'; // TMDB API base URL\n  const TMDB_HEADERS = {\n    Accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg' // Replace with your TMDB API key\n  };\n\n  // Fetch movie data on component mount\n  const fetchMovieData = useCallback(async movieId => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/movies/${movieId}`, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}` // Authorization header with user token\n        }\n      });\n      setSelectedMovie(response.data);\n      fetchSavedCast(response.data.tmdbId); // Fetch saved cast data after movie is selected\n    } catch (error) {\n      console.error('Error fetching movie:', error);\n      setImportStatus('Failed to load movie details. Please try again later.');\n    }\n  }, [auth.accessToken]);\n\n  // Fetch saved cast from the backend\n  const fetchSavedCast = async tmdbId => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/casts?movieId=${tmdbId}`, {\n        headers: {\n          Authorization: `Bearer ${auth.accessToken}` // Authorization header with user token\n        }\n      });\n      if (response.data.length === 0) {\n        setImportStatus('No cast members saved for this movie.');\n      }\n      setSavedCast(response.data);\n    } catch (error) {\n      console.error('Error fetching saved cast:', error);\n      setImportStatus('Failed to load saved cast. Please try again later.');\n    }\n  };\n\n  // Import cast from TMDb API\n  const importCasts = async () => {\n    if (!(selectedMovie !== null && selectedMovie !== void 0 && selectedMovie.tmdbId)) {\n      setImportStatus('Please select a movie first.');\n      return;\n    }\n    try {\n      const response = await axios.get(`${TMDB_API_URL}/movie/${selectedMovie.tmdbId}/credits?language=en-US`, {\n        headers: TMDB_HEADERS\n      });\n      const castList = response.data.cast;\n      if (castList.length === 0) {\n        setImportStatus('No cast members found in TMDb for this movie.');\n      } else {\n        setImportedCast(castList);\n        setImportStatus(`Successfully imported ${castList.length} cast members.`);\n      }\n    } catch (error) {\n      console.error('Error fetching cast:', error);\n      setImportStatus('Failed to import cast. Please try again.');\n    }\n  };\n\n  // Save imported cast to the database\n  const saveImportedCasts = async () => {\n    if (importedCast.length === 0) {\n      setImportStatus('No cast to save.');\n      return;\n    }\n    try {\n      await Promise.all(importedCast.map(async cast => {\n        const payload = {\n          userId: auth.user.userId,\n          // Assuming userId is available in auth context\n          movieId: selectedMovie.tmdbId,\n          name: cast.name,\n          characterName: cast.character,\n          url: cast.profile_path ? `https://image.tmdb.org/t/p/w500${cast.profile_path}` : ''\n        };\n        const response = await axios.post(`${API_BASE_URL}/casts`, payload, {\n          headers: {\n            Authorization: `Bearer ${auth.accessToken}` // Authorization header with user token\n          }\n        });\n        console.log('Saved cast:', response.data);\n      }));\n      setImportStatus('Successfully saved imported cast.');\n      fetchSavedCast(selectedMovie.tmdbId); // Refresh saved cast list\n    } catch (error) {\n      console.error('Error saving cast:', error);\n      setImportStatus('Failed to save imported cast.');\n    }\n  };\n\n  // Fetch movie data when movieId changes\n  useEffect(() => {\n    if (movieId) {\n      fetchMovieData(movieId);\n    }\n  }, [movieId, fetchMovieData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cast-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cast-header-title\",\n        children: \"Cast & Crew\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: importCasts,\n          children: \"Import Cast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveImportedCasts,\n          children: \"Save Imported Cast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), importStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"alert-box\",\n      children: importStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 24\n    }, this), savedCast.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cast-cards-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cast-cards\",\n        children: savedCast.map((cast, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cast-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: cast.url || 'https://via.placeholder.com/200' // Fallback image if no profile picture\n            ,\n            alt: cast.name,\n            className: \"cast-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cast-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: cast.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: cast.characterName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No cast members saved for this movie yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), importedCast.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cast-cards-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cast-cards\",\n        children: importedCast.map((cast, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cast-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w500${cast.profile_path}`,\n            alt: cast.name,\n            className: \"cast-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cast-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: cast.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: cast.character\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveImportedCasts,\n        children: \"Save Cast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(CastAndCrew, \"7m4pEa+/2e+3NkHO6m+vW7bsV8Y=\", false, function () {\n  return [useParams];\n});\n_c = CastAndCrew;\nexport default CastAndCrew;\nvar _c;\n$RefreshReg$(_c, \"CastAndCrew\");","map":{"version":3,"names":["useEffect","useState","useContext","useCallback","axios","useParams","AuthContext","jsxDEV","_jsxDEV","CastAndCrew","_s","auth","savedCast","setSavedCast","importedCast","setImportedCast","importStatus","setImportStatus","selectedMovie","setSelectedMovie","movieId","API_BASE_URL","TMDB_API_URL","TMDB_HEADERS","Accept","Authorization","fetchMovieData","response","get","headers","accessToken","data","fetchSavedCast","tmdbId","error","console","length","importCasts","castList","cast","saveImportedCasts","Promise","all","map","payload","userId","user","name","characterName","character","url","profile_path","post","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/CastandCrew/CastandCrew.jsx"],"sourcesContent":["import { useEffect, useState, useContext, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport { AuthContext } from '../../../../context/AuthToken';\r\nimport './CastandCrew.css';\r\n\r\nconst CastAndCrew = () => {\r\n  const { auth } = useContext(AuthContext);  // Use AuthContext to get the user's auth token\r\n  const [savedCast, setSavedCast] = useState([]);  // Store saved cast data\r\n  const [importedCast, setImportedCast] = useState([]);  // Store imported cast data\r\n  const [importStatus, setImportStatus] = useState('');  // Status message\r\n  const [selectedMovie, setSelectedMovie] = useState(null);  // Store selected movie data\r\n  const { movieId } = useParams();  // Get movieId from the URL\r\n\r\n  const API_BASE_URL = 'http://localhost:5000';  // API base URL (adjust as necessary)\r\n  const TMDB_API_URL = 'https://api.themoviedb.org/3';  // TMDB API base URL\r\n  const TMDB_HEADERS = {\r\n    Accept: 'application/json',\r\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MGY0ZjFlMmNhODQ1ZjA3NWY5MmI5ZDRlMGY3ZTEwYiIsIm5iZiI6MTcyOTkyNjY3NC40NzIwOTksInN1YiI6IjY3MTM3ODRmNjUwMjQ4YjlkYjYxZTgxMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RRJNLOg8pmgYoomiCWKtwkw74T3ZtAs7ZScqxo1bzWg'  // Replace with your TMDB API key\r\n  };\r\n\r\n  // Fetch movie data on component mount\r\n  const fetchMovieData = useCallback(async (movieId) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/movies/${movieId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,  // Authorization header with user token\r\n        },\r\n      });\r\n      setSelectedMovie(response.data);\r\n      fetchSavedCast(response.data.tmdbId);  // Fetch saved cast data after movie is selected\r\n    } catch (error) {\r\n      console.error('Error fetching movie:', error);\r\n      setImportStatus('Failed to load movie details. Please try again later.');\r\n    }\r\n  }, [auth.accessToken]);\r\n\r\n  // Fetch saved cast from the backend\r\n  const fetchSavedCast = async (tmdbId) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/casts?movieId=${tmdbId}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${auth.accessToken}`,  // Authorization header with user token\r\n        },\r\n      });\r\n      if (response.data.length === 0) {\r\n        setImportStatus('No cast members saved for this movie.');\r\n      }\r\n      setSavedCast(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching saved cast:', error);\r\n      setImportStatus('Failed to load saved cast. Please try again later.');\r\n    }\r\n  };\r\n\r\n  // Import cast from TMDb API\r\n  const importCasts = async () => {\r\n    if (!selectedMovie?.tmdbId) {\r\n      setImportStatus('Please select a movie first.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `${TMDB_API_URL}/movie/${selectedMovie.tmdbId}/credits?language=en-US`,\r\n        { headers: TMDB_HEADERS }\r\n      );\r\n      const castList = response.data.cast;\r\n      if (castList.length === 0) {\r\n        setImportStatus('No cast members found in TMDb for this movie.');\r\n      } else {\r\n        setImportedCast(castList);\r\n        setImportStatus(`Successfully imported ${castList.length} cast members.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching cast:', error);\r\n      setImportStatus('Failed to import cast. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Save imported cast to the database\r\n  const saveImportedCasts = async () => {\r\n    if (importedCast.length === 0) {\r\n      setImportStatus('No cast to save.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await Promise.all(\r\n        importedCast.map(async (cast) => {\r\n          const payload = {\r\n            userId: auth.user.userId,  // Assuming userId is available in auth context\r\n            movieId: selectedMovie.tmdbId,\r\n            name: cast.name,\r\n            characterName: cast.character,\r\n            url: cast.profile_path ? `https://image.tmdb.org/t/p/w500${cast.profile_path}` : '',\r\n          };\r\n\r\n          const response = await axios.post(`${API_BASE_URL}/casts`, payload, {\r\n            headers: {\r\n              Authorization: `Bearer ${auth.accessToken}`,  // Authorization header with user token\r\n            },\r\n          });\r\n\r\n          console.log('Saved cast:', response.data);\r\n        })\r\n      );\r\n      setImportStatus('Successfully saved imported cast.');\r\n      fetchSavedCast(selectedMovie.tmdbId);  // Refresh saved cast list\r\n    } catch (error) {\r\n      console.error('Error saving cast:', error);\r\n      setImportStatus('Failed to save imported cast.');\r\n    }\r\n  };\r\n\r\n  // Fetch movie data when movieId changes\r\n  useEffect(() => {\r\n    if (movieId) {\r\n      fetchMovieData(movieId);\r\n    }\r\n  }, [movieId, fetchMovieData]);\r\n\r\n  return (\r\n    <div className=\"cast-container\">\r\n      <div className=\"cast-header\">\r\n        <h2 className=\"cast-header-title\">Cast & Crew</h2>\r\n        <div>\r\n          <button onClick={importCasts}>Import Cast</button>\r\n          <button onClick={saveImportedCasts}>Save Imported Cast</button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Status message */}\r\n      {importStatus && <p className=\"alert-box\">{importStatus}</p>}\r\n\r\n      {/* Display Saved Cast */}\r\n      {savedCast.length > 0 ? (\r\n        <div className=\"cast-cards-container\">\r\n          <div className=\"cast-cards\">\r\n            {savedCast.map((cast, index) => (\r\n              <div key={index} className=\"cast-card\">\r\n                <img\r\n                  src={cast.url || 'https://via.placeholder.com/200'}  // Fallback image if no profile picture\r\n                  alt={cast.name}\r\n                  className=\"cast-image\"\r\n                />\r\n                <div className=\"cast-info\">\r\n                  <h3>{cast.name}</h3>\r\n                  <p>{cast.characterName}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>No cast members saved for this movie yet.</p>\r\n      )}\r\n\r\n      {/* Display Imported Cast */}\r\n      {importedCast.length > 0 && (\r\n        <div className=\"cast-cards-container\">\r\n          <div className=\"cast-cards\">\r\n            {importedCast.map((cast, index) => (\r\n              <div key={index} className=\"cast-card\">\r\n                <img\r\n                  src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\r\n                  alt={cast.name}\r\n                  className=\"cast-image\"\r\n                />\r\n                <div className=\"cast-info\">\r\n                  <h3>{cast.name}</h3>\r\n                  <p>{cast.character}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Save Imported Cast Button */}\r\n      <div className=\"button-group\">\r\n        <button onClick={saveImportedCasts}>Save Cast</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CastAndCrew;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}