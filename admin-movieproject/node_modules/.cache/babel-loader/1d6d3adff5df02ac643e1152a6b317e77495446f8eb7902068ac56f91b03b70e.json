{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\CastandCrew\\\\CastandCrew.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\nimport axios from 'axios';\nimport './CastandCrew.css';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Casts() {\n  _s();\n  const {\n    auth\n  } = useContext(AuthContext);\n  const [query, setQuery] = useState('');\n  const [cast, setCast] = useState([]);\n  const [selectedCast, setSelectedCast] = useState({});\n  const searchRef = useRef();\n  const [notFound, setNotFound] = useState(false);\n  const nameRef = useRef();\n  const characterNameRef = useRef();\n  const urlRef = useRef();\n  const {\n    movieId\n  } = useParams();\n\n  // Fetch Cast Data from TMDB API\n  const handleImportCast = async () => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {\n        headers: {\n          Authorization: `Bearer YOUR_TMDB_API_KEY` // Use your TMDB API Key here\n        }\n      });\n      const tmdbCast = response.data.cast;\n      setCast(tmdbCast);\n      alert('Cast imported successfully!');\n    } catch (error) {\n      console.error(\"Error importing cast:\", error);\n      alert('Failed to import cast.');\n    }\n  };\n  const getAll = useCallback(movie_id => {\n    axios({\n      method: 'get',\n      url: `/movies/${movie_id}`,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${auth.accessToken}`\n      }\n    }).then(response => {\n      setCast(response.data.casts);\n    }).catch(error => {\n      var _error$response;\n      console.error(\"Error fetching Casts:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    });\n  }, [auth.accessToken]);\n  useEffect(() => {\n    getAll(movieId);\n  }, [movieId, getAll]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast-box\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleImportCast,\n      children: \"Import Cast from TMDB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Casts, \"I9lv5V9/4Hyqc+ggqTaIX0pPt5M=\", false, function () {\n  return [useParams];\n});\n_c = Casts;\nexport default Casts;\nvar _c;\n$RefreshReg$(_c, \"Casts\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useCallback","useRef","AuthContext","axios","useParams","jsxDEV","_jsxDEV","Casts","_s","auth","query","setQuery","cast","setCast","selectedCast","setSelectedCast","searchRef","notFound","setNotFound","nameRef","characterNameRef","urlRef","movieId","handleImportCast","response","get","headers","Authorization","tmdbCast","data","alert","error","console","getAll","movie_id","method","url","Accept","accessToken","then","casts","catch","_error$response","message","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/CastandCrew/CastandCrew.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useCallback, useRef } from 'react';\r\nimport { AuthContext } from '../../../../../utils/context/AuthToken';\r\nimport axios from 'axios';\r\nimport './CastandCrew.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Casts() {\r\n  const { auth } = useContext(AuthContext);\r\n  const [query, setQuery] = useState('');\r\n  const [cast, setCast] = useState([]);\r\n  const [selectedCast, setSelectedCast] = useState({});\r\n  const searchRef = useRef();\r\n  const [notFound, setNotFound] = useState(false);\r\n  const nameRef = useRef();\r\n  const characterNameRef = useRef();\r\n  const urlRef = useRef();\r\n  const { movieId } = useParams();\r\n\r\n  // Fetch Cast Data from TMDB API\r\n  const handleImportCast = async () => {\r\n    try {\r\n      const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {\r\n        headers: {\r\n          Authorization: `Bearer YOUR_TMDB_API_KEY`, // Use your TMDB API Key here\r\n        },\r\n      });\r\n      const tmdbCast = response.data.cast;\r\n      setCast(tmdbCast);\r\n      alert('Cast imported successfully!');\r\n    } catch (error) {\r\n      console.error(\"Error importing cast:\", error);\r\n      alert('Failed to import cast.');\r\n    }\r\n  };\r\n\r\n  const getAll = useCallback((movie_id) => {\r\n    axios({\r\n      method: 'get',\r\n      url: `/movies/${movie_id}`,\r\n      headers: {\r\n        Accept: 'application/json',\r\n        Authorization: `Bearer ${auth.accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setCast(response.data.casts);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching Casts:\", error.response?.data || error.message);\r\n      });\r\n  }, [auth.accessToken]);\r\n\r\n  useEffect(() => {\r\n    getAll(movieId);\r\n  }, [movieId, getAll]);\r\n\r\n  return (\r\n    <div className=\"cast-box\">\r\n      <button onClick={handleImportCast}>Import Cast from TMDB</button>\r\n\r\n      {/* Your other JSX code for displaying and editing cast */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Casts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}