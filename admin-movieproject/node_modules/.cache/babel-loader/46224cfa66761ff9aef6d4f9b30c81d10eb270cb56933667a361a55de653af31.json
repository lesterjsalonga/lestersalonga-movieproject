{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lester Salonga\\\\Desktop\\\\movieproject\\\\admin-movieproject\\\\src\\\\pages\\\\Main\\\\Movie\\\\Form\\\\CastandCrew\\\\CastandCrew.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../../../../utils/context/AuthToken';\nimport './CastAndCrew.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CastAndCrew = () => {\n  _s();\n  const [importedCast, setImportedCast] = useState([]); // Store the imported cast\n  const [importStatus, setImportStatus] = useState(''); // Import status message\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const {\n    movieId\n  } = useParams();\n  const navigate = useNavigate();\n  const API_BASE_URL = 'https://api.themoviedb.org/3';\n  const TMDB_HEADERS = {\n    Accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2NTAxODgxZmE3YWRhZTQzYWY0MGFmNDA1YzFjODliNCIsIm5iZiI6MTczMjU5NTU3OS4yMjMwMTI3LCJzdWIiOiI2NzEyZmFiYTI1YzcwYjhiMWQ2N2Y4YjQiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.oJ-YA-BPl-l8XBcp_VYDJDTO66e31OMKA-igarucAqE' // Replace with your actual API key\n  };\n\n  // Fetch movie data on mount\n  useEffect(() => {\n    if (movieId) {\n      const fetchMovie = async () => {\n        try {\n          const response = await axios.get(`/movies/${movieId}`);\n          setSelectedMovie(response.data);\n        } catch (err) {\n          console.error('Error fetching movie:', err);\n        }\n      };\n      fetchMovie();\n    }\n  }, [movieId]);\n\n  // Import the cast from TMDb\n  const importCasts = async () => {\n    if (!(selectedMovie !== null && selectedMovie !== void 0 && selectedMovie.tmdbId)) {\n      setImportStatus(\"Please select a movie first.\");\n      return;\n    }\n    try {\n      const response = await axios.get(`${API_BASE_URL}/movie/${selectedMovie.tmdbId}/credits?language=en-US`, {\n        headers: TMDB_HEADERS\n      });\n      const castList = response.data.cast;\n      setImportedCast(castList);\n      setImportStatus(`Successfully imported ${castList.length} cast members.`);\n    } catch (err) {\n      console.error('Error fetching cast:', err);\n      setImportStatus('Failed to import cast. Please try again.');\n    }\n  };\n\n  // Save the imported cast to the database\n  const saveImportedCasts = async () => {\n    if (importedCast.length === 0) {\n      setImportStatus(\"No cast to save.\");\n      return;\n    }\n    const accessToken = localStorage.getItem('accessToken');\n    try {\n      await Promise.all(importedCast.map(async cast => {\n        const payload = {\n          userId: selectedMovie.userId,\n          // Assuming userId is available from selectedMovie\n          movieId: selectedMovie.tmdbId,\n          name: cast.name,\n          characterName: cast.character,\n          url: cast.profile_path ? `https://image.tmdb.org/t/p/w500${cast.profile_path}` : ''\n        };\n        const response = await axios.post('/casts', payload, {\n          headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        console.log('Saved cast:', response.data);\n      }));\n      setImportStatus(\"Successfully saved imported cast.\");\n    } catch (err) {\n      console.error('Error saving cast:', err);\n      setImportStatus(\"Failed to save imported cast.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cast-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cast & Crew\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: importCasts,\n      children: \"Import Cast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), importStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: importStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 24\n    }, this), importedCast.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Imported Cast:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: importedCast.map((cast, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [cast.name, \" as \", cast.character]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), cast.profile_path && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w500${cast.profile_path}`,\n            alt: cast.name,\n            style: {\n              width: 50,\n              height: 75,\n              marginLeft: '10px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveImportedCasts,\n      children: \"Save Imported Cast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(CastAndCrew, \"xos3PIOy2bhNZZdICqeJqLMOSmI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = CastAndCrew;\nexport default CastAndCrew;\nvar _c;\n$RefreshReg$(_c, \"CastAndCrew\");","map":{"version":3,"names":["useEffect","useState","axios","useParams","useNavigate","AuthContext","jsxDEV","_jsxDEV","CastAndCrew","_s","importedCast","setImportedCast","importStatus","setImportStatus","selectedMovie","setSelectedMovie","movieId","navigate","API_BASE_URL","TMDB_HEADERS","Accept","Authorization","fetchMovie","response","get","data","err","console","error","importCasts","tmdbId","headers","castList","cast","length","saveImportedCasts","accessToken","localStorage","getItem","Promise","all","map","payload","userId","name","characterName","character","url","profile_path","post","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","src","alt","style","width","height","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/Lester Salonga/Desktop/movieproject/admin-movieproject/src/pages/Main/Movie/Form/CastandCrew/CastandCrew.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../../../../utils/context/AuthToken';\r\nimport './CastAndCrew.css';\r\n\r\nconst CastAndCrew = () => {\r\n  const [importedCast, setImportedCast] = useState([]); // Store the imported cast\r\n  const [importStatus, setImportStatus] = useState(''); // Import status message\r\n  const [selectedMovie, setSelectedMovie] = useState(null);\r\n  const { movieId } = useParams();\r\n  const navigate = useNavigate();\r\n  const API_BASE_URL = 'https://api.themoviedb.org/3';\r\n  const TMDB_HEADERS = {\r\n    Accept: 'application/json',\r\n    Authorization:\r\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2NTAxODgxZmE3YWRhZTQzYWY0MGFmNDA1YzFjODliNCIsIm5iZiI6MTczMjU5NTU3OS4yMjMwMTI3LCJzdWIiOiI2NzEyZmFiYTI1YzcwYjhiMWQ2N2Y4YjQiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.oJ-YA-BPl-l8XBcp_VYDJDTO66e31OMKA-igarucAqE', // Replace with your actual API key\r\n  };\r\n\r\n  // Fetch movie data on mount\r\n  useEffect(() => {\r\n    if (movieId) {\r\n      const fetchMovie = async () => {\r\n        try {\r\n          const response = await axios.get(`/movies/${movieId}`);\r\n          setSelectedMovie(response.data);\r\n        } catch (err) {\r\n          console.error('Error fetching movie:', err);\r\n        }\r\n      };\r\n\r\n      fetchMovie();\r\n    }\r\n  }, [movieId]);\r\n\r\n  // Import the cast from TMDb\r\n  const importCasts = async () => {\r\n    if (!selectedMovie?.tmdbId) {\r\n      setImportStatus(\"Please select a movie first.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `${API_BASE_URL}/movie/${selectedMovie.tmdbId}/credits?language=en-US`,\r\n        { headers: TMDB_HEADERS }\r\n      );\r\n      const castList = response.data.cast;\r\n      setImportedCast(castList);\r\n      setImportStatus(`Successfully imported ${castList.length} cast members.`);\r\n    } catch (err) {\r\n      console.error('Error fetching cast:', err);\r\n      setImportStatus('Failed to import cast. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Save the imported cast to the database\r\n  const saveImportedCasts = async () => {\r\n    if (importedCast.length === 0) {\r\n      setImportStatus(\"No cast to save.\");\r\n      return;\r\n    }\r\n\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    try {\r\n      await Promise.all(\r\n        importedCast.map(async (cast) => {\r\n          const payload = {\r\n            userId: selectedMovie.userId,  // Assuming userId is available from selectedMovie\r\n            movieId: selectedMovie.tmdbId,\r\n            name: cast.name,\r\n            characterName: cast.character,\r\n            url: cast.profile_path ? `https://image.tmdb.org/t/p/w500${cast.profile_path}` : '',\r\n          };\r\n\r\n          const response = await axios.post('/casts', payload, {\r\n            headers: {\r\n              Accept: 'application/json',\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          });\r\n\r\n          console.log('Saved cast:', response.data);\r\n        })\r\n      );\r\n      setImportStatus(\"Successfully saved imported cast.\");\r\n    } catch (err) {\r\n      console.error('Error saving cast:', err);\r\n      setImportStatus(\"Failed to save imported cast.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cast-container\">\r\n      <h2>Cast & Crew</h2>\r\n\r\n      {/* Import Button */}\r\n      <button onClick={importCasts}>Import Cast</button>\r\n\r\n      {/* Status message */}\r\n      {importStatus && <p>{importStatus}</p>}\r\n\r\n      {/* Display Imported Cast */}\r\n      {importedCast.length > 0 && (\r\n        <div>\r\n          <h3>Imported Cast:</h3>\r\n          <ul>\r\n            {importedCast.map((cast, index) => (\r\n              <li key={index}>\r\n                <span>{cast.name} as {cast.character}</span>\r\n                {cast.profile_path && (\r\n                  <img\r\n                    src={`https://image.tmdb.org/t/p/w500${cast.profile_path}`}\r\n                    alt={cast.name}\r\n                    style={{ width: 50, height: 75, marginLeft: '10px' }}\r\n                  />\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      {/* Save Button */}\r\n      <button onClick={saveImportedCasts}>Save Imported Cast</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CastAndCrew;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}